---
--- Generated by PluginCreator
--- engine_overwrite entity
--- DateTime:2023-02-24
---

local Entity = Entity
local EntityServer = EntityServer
--buff key:
--function Entity.EntityProp:xxx(value, add, buff)
--end

---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")
---@type MonsterBornHelper
local MonsterBornHelper = T(Lib, "MonsterBornHelper")

local engine_onCreate = Entity.onCreate

function Entity:onCreate()
    if engine_onCreate then
        engine_onCreate(self)
    end
    self:onCreateExtend()
end

--- onCreate拓展，空方法
function Entity:onCreateExtend()
    
end

function EntityServer:doAttack(info)
    --{target = target, skill = self, originalSkillName = packet.name or self.fullName,
    -- cause = "ENGINE_MELEE_ATTACK"}
    local target=info.target
    local skill={skillId=info.skill.skillId}
    --print(">>>>>>>>>>>>>>>> doattck",skill.skillId,self.objID,target.objID)
    if target:isMonster() and self:isMonster() then
        return
    end
    if not target:isInCanAttackState(self) then
        return
    end
    local cfg=SkillMovesConfig:getNewSkillConfig(info.skill.skillId)
    self:attackEntity(target, nil, skill,{packet=info.packet})
    if cfg and cfg.missileInf.hitEntityEffectCustomName then
        target:addBuff("myplugin/"..Define.GenHitEffectBuffFolder.."/"..cfg.missileInf.hitEntityEffectCustomName, 30)
    end
end

function EntityServer:face2Pos(pos)
    local curHP = self:getCurHp()
    local isDeadState = self:isInStateType(Define.RoleStatus.DEAD)
    if curHP <= 0 or isDeadState then
        return
    end
    local cur = self:getPosition()
    if cur then
        self:setRotationYaw(Lib.v3AngleXZ(Lib.v3cut(pos, cur)))
        self:syncPosDelay()
    end
end

local engine_spawnInfo = EntityServer.spawnInfo
function EntityServer:spawnInfo()
    if self:isMonster() then
        MonsterBornHelper:dragEntityToGround(self)
    end
    if engine_spawnInfo then
        return engine_spawnInfo(self)
    end
end

local engine_changeSkinPart = EntityServer.changeSkinPart
function EntityServer:changeSkinPart(skinPartData, sync)
    engine_changeSkinPart(self, skinPartData, sync)
    if self.isPlayer then
        Lib.emitEvent(Event.EVENT_ENTITY_SKIN_INFO_UPDATE, self.platformUserId)
    end
end

local engine_changeSkin = EntityServer.changeSkin
function EntityServer:changeSkin(skinData, sync)
    engine_changeSkin(self, skinData, sync)
    if self.isPlayer then
        local mySkin = self:data("skin")
        Lib.emitEvent(Event.EVENT_ENTITY_SKIN_INFO_UPDATE, self.platformUserId)
    end
end