---
--- Generated by PluginCreator
--- jump_control player
--- DateTime:2023-03-03
---

local Player = Player

local JumpStateMap = {
    ["JumpRaiseState"] = (require "client.player.state.jump_raise_state").new(),
    ["JumpFloatState"] = (require "client.player.state.jump_float_state").new(),
    ["JumpFreeFallState"] = (require "client.player.state.jump_freefall_state").new(),
}

function Player:checkPlayerIsCanJump()
    if self.onGround then
        return true
    end
    return not self.lockKeyJump
end

-- 当前跳跃次数
function Player:getJumpIndex()
    local jumpCount = self:getJumpCount()
    return jumpCount%2 + 1
    --local maxJumpCount = self:getMaxJumpCount()
    --local skillIndex
    --if jumpCount == 1 then
    --    skillIndex = 1
    --elseif jumpCount < maxJumpCount then
    --    skillIndex = 2
    --else
    --    skillIndex = 1
    --end
    --return skillIndex
end

-- 获取当前跳跃技能ID
function Player:getJumpSkillId()
    local index = self:getJumpIndex()
    if index == 1 then
        return 1000002
    else
        return 1000003
    end
end

function Player:changeJumpState(new_state)
    if self.curJumpClass then
        self.curJumpClass:leave(self)
    end

    local class = JumpStateMap[new_state]
    if class then
        self.curJumpClass = class
        class:enter(self)
    end
end

function Player:recoverJumpProp()
    ---@type LuaTimer
    local LuaTimer = T(Lib, "LuaTimer")
    LuaTimer:cancel(self.jumpFloatTimer)
    LuaTimer:cancel(self.jumpFallTimer)

    self:resetJumpCount()

    self.jumpRaiseEnd = false
    self.curJumpClass = nil
    self.jumpLastMotionY = 0
    self.lockKeyJump = false
    self.jumpRealHeight = 0
    self.startJumpPosy = -99999
    self:exitStateType(Define.RoleStatus.JUMP)
end

function Player:eventFallGround(fallDistance)
    if self.jumpRealHeight >= World.cfg.jump_controlSetting.playFallDistance then
        if not self:canNotBreakAction() then
            Skill.Cast("myplugin/fall_ground_skill")
            local packet = {
                pid = "requestPlayFallEffect",
                pos = self:getPosition(),
                yaw = self:getRotationYaw()
            }
            self:sendPacket(packet)
        end
    end
    self:recoverJumpProp()
    self.isInAirStatus = 0
    self:updateSprintFallGravity()
end