---
--- Generated by PluginCreator
--- game_role_common mainLua
--- DateTime:2023-03-03
---

Lib.setDebugLog(true)

require "common.game_lib"
require "common.entity_game_role_common"
require "common.event_game_role_common"
require "common.define_game_role_common"
require "common.system.growth_system"
require "common.system.inventory_system"
require "common.system.equipment_system"
require "common.system.ability_system"
require "common.system.attribute_system"
require "common.system.battle_system"
-- require "common.system.wallet_system"
require "common.system.buff_system"
require "common.system.skin_system"
require "common.system.business_system"
require "common.helper.player_data_helper"
require "common.helper.reward_helper"
require "common.config.danger_protect_config"

if World.isClient then
    require "client.player.player_game_role_common"
    require "client.player.packet_game_role_common"
    require "client.entity.entity_game_role_common"
    require "client.entity.entity_value_func_game_role_common"
    require "client.helper.game_role_common_gm_helper"
    require "client.gm_game_role_common"
    require "client.game_camera_control"

    --- 初始化管理器
    local initManager = function()
        ---@type BattleManagerClient
        local BattleManagerClient = require "client.manager.battle_manager"
        BattleManagerClient:instance():init()

        ---@type MapManagerClient
        local MapManagerClient = require "client.manager.game_map_manager"
        MapManagerClient:instance():init()
    end
    initManager()
else
    require "server.player.player_game_role_common"
    require "server.player.packet_game_role_common"
    require "server.entity.entity_game_role_common"
    require "server.helper.game_role_common_gm_helper"
    require "server.gm_game_role_common"

    --- 初始化管理器
    local initManager = function()
        ---@type BattleManagerServer
        local BattleManagerServer = require "server.manager.battle_manager"
        BattleManagerServer:instance():init()

        ---@type BuffManagerServer
        local BuffManagerServer = require "server.manager.buff_manager"
        BuffManagerServer:instance():init()

        ---@type MapManagerServer
        local MapManagerServer = require "server.manager.game_map_manager"
        MapManagerServer:instance():init()

    end
    initManager()

    local LuaTimer = T(Lib, "LuaTimer") ---@type LuaTimer
    local lastTime = os.time()
    local addTime = 20
    LuaTimer:scheduleTimer(function()
        local curTime = os.time()
        addTime = addTime - 1
        if not Lib.isSameDay(lastTime, curTime) then
            lastTime = curTime
            addTime = 20
            --服务器跨天
            for _, player in pairs(Game.GetAllPlayers()) do
                if player and player:isValid() then
                    player:autoDataExpire()
                    player:addActiveDay(curTime)
                end
            end
            --- 跨天事件
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_AUTO_DATA_EXPIRE)
        end
    end, 1000, -1)

end

local handlers = {}

--function handlers.openXXXWnd()
	--TODO
--end

if World.isClient then
    Lib.subscribeEvent(Event.EVENT_PLAYER_LOGIN, function(playerInf)
        local player=  World.CurWorld:getEntity(playerInf.objID)
        if not player or not player:isValid()  then
            return
        end
        ---@type GameCameraControl
        local GameCameraControl = T(Lib, "GameCameraControl")
        GameCameraControl:initCamera()
    end)

    Lib.subscribeEvent(Event.EVENT_ENTITY_SPAWN, function(objID)
        local entity = World.CurWorld:getEntity(objID)
        if entity and entity:isValid() and entity:isMonster() then
            entity:showMonsterHpBar()
        end
    end)
else
    ---@type PlayerDataHelper
    local PlayerDataHelper = T(Lib, "PlayerDataHelper")
    ---@type BattleManagerServer
    local BattleManagerServer = require "server.manager.battle_manager"
    ---@type BuffManagerServer
    local BuffManagerServer = require "server.manager.buff_manager"
    ---@type MapManagerServer
    local MapManagerServer = require "server.manager.game_map_manager"
        ---@type InventorySystem
    local InventorySystem = T(Lib, "InventorySystem")
    ---@type DangerProtectConfig
    local DangerProtectConfig = T(Config, "DangerProtectConfig")
    ---@type RewardHelper
    local RewardHelper = T(Lib, "RewardHelper")


    --- 虚空掉落处理
    ---@param entity Entity
    function player_touchdown(entity)
        if not entity or not entity:isValid() then
            return
        end
        if entity.isPlayer then
            if entity:isInMissionRoom() then
                Plugins.CallTargetPluginFunc("game_mission", "backBornPosition", entity)
            else
                MapManagerServer:instance():backBornPosition(entity)
            end
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ENTITY_TOUCH_DOWN, entity)
        elseif entity:isMonster() then
            if entity:isMissionMonster() then
                Plugins.CallTargetPluginFunc("game_mission", "backBornPosition", entity)
            else
                local bornPos = entity:data("main").regionBirthPos
                local map = entity.map
                entity:setMapPos(map, bornPos)
            end
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ENTITY_TOUCH_DOWN, entity)
        end
    end

    local function resetDangerFunc1(player)
        local isResetDanger = player:getIsResetDanger()
        if isResetDanger then
            return
        end

        local dangerValue = player:getDangerValue()
        if dangerValue >= 10000000 then
            local roomGameConfig = Server.CurServer:getConfig()
            local serverRegionId = tonumber(roomGameConfig:getRegionId())

            local fixed_danger_exp = 1
            local rankInfo = DangerProtectConfig:getCfgById(player.platformUserId)
            if rankInfo then
                player:setDangerValue(rankInfo.score, true)
                player:setIsResetDanger(true)
                fixed_danger_exp = rankInfo.score
            else
                local resetValue = 10000
                if serverRegionId == 8005 then
                    resetValue = 30000
                elseif serverRegionId == 8008 then
                    resetValue = 70000
                end
                player:setDangerValue(resetValue, true)
                player:setIsResetDanger(true)
                fixed_danger_exp = resetValue
            end

            local defaultData = {
                before_fix_danger_exp = tostring(dangerValue),
                fixed_danger_exp = fixed_danger_exp
            }
            Plugins.CallTargetPluginFunc("report", "report", "danger_exp_bug_report", defaultData, player)
        else
            player:setIsResetDanger(true)
        end
    end

    local function resetDangerFunc2(player)
        local dangerPro = 1
        local isResetDanger = player:getIsResetSecondDanger()
        if isResetDanger >= dangerPro then
            return
        end

        local dangerValue = player:getDangerValue()
        if dangerValue >= 10000000 then
            local fixed_danger_exp = 10000
            player:setDangerValue(fixed_danger_exp, true)
            player:setIsResetSecondDanger(dangerPro)

            local defaultData = {
                before_fix_danger_exp = tostring(dangerValue),
                fixed_danger_exp = fixed_danger_exp
            }
            Plugins.CallTargetPluginFunc("report", "report", "danger_exp_bug_report", defaultData, player)
        else
            player:setIsResetSecondDanger(dangerPro)
        end
    end

    -- 服务端登陆
    function handlers.OnPlayerLogin(player)
        if not player or not player:isValid() then
            return
        end
        if not player.isPlayer then
            return
        end

        resetDangerFunc1(player)
        resetDangerFunc2(player)
    end

    ---@param context any
    function handlers.ENTITY_ENTER(context)
        ---@type Entity
        local entity = context.obj1
        if not entity or not entity:isValid() then
            return
        end
        if entity.isPlayer then
            local dataVersionInfo = entity:getDataVersionInfo()
            local lastVersion = World.cfg.cleanDataVersion
            if dataVersionInfo < lastVersion then
                PlayerDataHelper:cleanPlayerData(entity)
                entity:setDataVersionInfo(lastVersion)
            end

            --- 玩家数据处理
            PlayerDataHelper:onPlayerLogin(entity)
            --- 添加player
            BattleManagerServer:instance():addEntity(entity)
            BuffManagerServer:instance():addEntity(entity)
            --- 初始化处理
            MapManagerServer:instance():onPlayerLogin(entity)

            entity:initMissionCountInfo()

            local lastTime = entity:getRoleLastLoginTime()
            local curTime = Lib.getDayStartTime(os.time())
            if lastTime ~= curTime then
                entity:setDayKilledOther({})
                entity:resetMissionCountInfo()
            end
            entity:setRoleLastLoginTime(curTime)

            local dangerValue = entity:getDangerValue()
            if dangerValue >= World.cfg.game_role_commonSetting.dangerBoardVal2
                    or dangerValue >= World.cfg.game_role_commonSetting.dangerBoardVal1 then
                local packet = {
                    pid = "SyncClientDangerEnter",
                    dangerValue = dangerValue,
                    name = entity.name or entity.nickName
                }
                WorldServer.BroadcastPacket(packet)
            end
        elseif entity:isMonster() then
            BattleManagerServer:instance():addEntity(entity)
            BuffManagerServer:instance():addEntity(entity)
        end
    end

    --- 退出
    ---@param context any
    function handlers.ENTITY_LEAVE(context)
        ---@type Entity
        local entity = context.obj1
        if not entity or not entity:isValid() then
            return
        end
        if entity.isPlayer then
            entity:onEntityLeave()

            PlayerDataHelper:onPlayerLogout(entity)
            --- 移除player
            BattleManagerServer:instance():removeEntity(entity)
            BuffManagerServer:instance():removeEntity(entity)
        elseif entity:isMonster() then
            entity:onEntityLeave()

            BattleManagerServer:instance():removeEntity(entity)
            BuffManagerServer:instance():removeEntity(entity)
        end
    end

    --- 获取场景物品
    ---@param entity any
    ---@param itemId any
    function handlers.gainDropItem(entity, itemId)
        RewardHelper:gainDropItem(entity, itemId)
    end

    --- 添加拾取能力
    ---@param entity any
    ---@param aid any
    ---@param abilityId any
    function handlers.addDropAbility(entity, aid, abilityId)
        InventorySystem.MODIFY_SOURCE = "scene"
        if InventorySystem:changeItemNumById(entity, Define.INVENTORY_TYPE.ABILITY, aid, 1) then
            PlayerDataHelper:saveInventoryData(entity, true)
            --- 刷新能力
            entity:sendPacket({
                pid = "S2CGainDropAbility",
                aid = aid,
            })
        else
            --- 添加新物品
            local success, items = InventorySystem:addItemByItemId(entity, Define.INVENTORY_TYPE.ABILITY, abilityId, 1)
            if success then
                ---@type Ability
                local ability, slotIndex = items[1].item, items[1].index
                ability:setId(aid)
                PlayerDataHelper:saveInventoryData(entity, true)
                --- 刷新能力
                entity:sendPacket({
                    pid = "S2CGainDropAbility",
                    aid = aid,
                    item = ability:serialize(),
                    index = slotIndex,
                })  
            end
        end
        InventorySystem.MODIFY_SOURCE = nil
    end

    --- 领取宝箱奖励
    ---@param entity Entity
    ---@param itemAlias string
    function handlers.gainTreasureBox(entity, itemAlias)
        RewardHelper:gainTreasureBox(entity, itemAlias)
    end

    --- 领取副本奖励
    ---@param entity any
    ---@param missionId any
    function handlers.gainMissionRewards(entity, missionId)
        RewardHelper:gainMissionRewards(entity, missionId)
    end

    --- 商业化活动奖励
    ---@param entity any
    ---@param gift any
    function handlers.addLimitedActivityRewards(entity, gift)
        RewardHelper:addLimitedActivityRewards(entity, gift)
    end

    --- 跳转地图
    ---@param entity Entity
    ---@param mapName string
    ---@param position Vector3
    function handlers.gotoMap(entity, mapName, position)
        MapManagerServer:instance():gotoMap(entity, mapName, position)
    end
end

function handlers.ENTITY_STATUS_CHANGE(context)
    local entity = context.obj1
    local newState = context.newState
    if not entity or not entity:isValid() or not entity.isPlayer or not newState then
        return
    end

    if entity.playingRunSound == nil then
        entity.playingRunSound=false
    end
    local playRunSound=newState=="RUN"
    --print("----ENTITY_STATUS_CHANGE--------",entity.objID,newState,playRunSound,entity.playingRunSound)
    if playRunSound ~=entity.playingRunSound then
        entity.playingRunSound=playRunSound
        entity:sendPacketToTracking({pid="switchRunSound",objID=entity.objID,playRunSound=playRunSound}, true)
    end
    if playRunSound then
        entity:stopPlayerAction()
    end
end

return function(name, ...)
	if type(handlers[name]) ~= "function" then
		return
	end
	return handlers[name](...)
end
