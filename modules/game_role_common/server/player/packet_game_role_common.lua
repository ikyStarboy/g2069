---
--- Generated by PluginCreator
--- game_role_common handler
--- DateTime:2023-03-03
---
---@type BattleManagerServer
local BattleManagerServer = require "server.manager.battle_manager"
---@type BuffManagerServer
local BuffManagerServer = require "server.manager.buff_manager"
---@type BattleSystem
local BattleSystem = T(Lib, "BattleSystem")
---@type ItemConfig
local ItemConfig = T(Config, "ItemConfig")

---@type RewardHelper
local RewardHelper = T(Lib, "RewardHelper")

---@type PlayerDataHelper
local PlayerDataHelper = T(Lib, "PlayerDataHelper")
---@type AttributeLevelConfig
local AttributeLevelConfig = T(Config, "AttributeLevelConfig")

---@type AttributeSystem
local AttributeSystem = T(Lib, "AttributeSystem")
---@type WalletSystem
local WalletSystem = T(Lib, "WalletSystem")

---@type InventorySystem
local InventorySystem = T(Lib, "InventorySystem")
---@type AbilitySystem
local AbilitySystem = T(Lib, "AbilitySystem")

---@type AbilityAwakeConfig
local AbilityAwakeConfig = T(Config, "AbilityAwakeConfig")
---@type SkillConfig
local SkillConfig = T(Config, "SkillConfig")

local handles = T(Player, "PackageHandlers")
--function handles:Xxxxx(packet)
--end

--- 解锁索引
---@param packet any
function handles:C2SUnlockSetIndex(packet)
    ---@type Entity
    local player = self
    local unlockIndex = packet.idx
    local stateCode = 0
    local cost = AttributeSystem:getUnlockCostCube()

    if AttributeSystem:getUnlockIndex(player) + 1 ~= unlockIndex then
        --- 解锁等级异常
        stateCode = 1
    elseif WalletSystem:getCube(player) < cost then
        --- 金魔方不足
        stateCode = 2
    else
        WalletSystem:payCube(player, "unlock_point_set", cost, function(success)
            if not player or not player:isValid() then
                return
            end

            if success then
                local preIndex = AttributeSystem:getIndex(player)
                if AttributeSystem:setUnlockIndex(player, unlockIndex) then
                    --- 设置加点方案
                    AttributeSystem:setIndex(player, unlockIndex)
                    --- 保存数据
                    PlayerDataHelper:saveAttributeData(player, true)

                    Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_POINT_SET_UNLOCK, true, player, unlockIndex, preIndex)
                else
                    stateCode = 3
                end
            else
                stateCode = 4
            end

            player:sendPacket({
                pid = "S2CUnlockSetIndex",
                stateCode = stateCode,
                idx = unlockIndex,
            })

        end, 1, "unlock_point_set_index_" .. unlockIndex)
        return    
    end

    player:sendPacket({
        pid = "S2CUnlockSetIndex",
        stateCode = stateCode,
        idx = unlockIndex,
    })
end

--- 加点
---@param packet any
function handles:C2SAddSetPoint(packet)
    local player = self
    local index = packet.idx
    local id = packet.aid
    local stateCode = 0
    local unlockIndex = AttributeSystem:getUnlockIndex(player)
    local alevel = AttributeSystem:getLevelByIndex(player, id, index)
    local max_level = AttributeLevelConfig:getMaxLevel(id)
    local point = math.min(packet.point or 1, max_level - alevel)

    if unlockIndex < index then
        stateCode = 1
    elseif alevel >= max_level then
        stateCode = 2
    elseif AttributeSystem:getRemainPointByIndex(player, index) < point then
        stateCode = 3
    else
        AttributeSystem:setLevelByIndex(player, id, alevel + point, index)
        --- 保存数据
        PlayerDataHelper:saveAttributeData(player, true)

        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ADD_POINT, true, player, index, id, alevel + point)
    end

    player:sendPacket({
        pid = "S2CAddSetPoint",
        stateCode = stateCode,
        aid = id,
        idx = index,
        point = point,
    })
end

--- 切换属性方案
---@param packet any
function handles:C2SUpdatePointSetIndex(packet)
    ---@type Entity
    local player = self
    local stateCode = 0
    local index = packet.idx
    if AttributeSystem:getUnlockIndex(player) < index then
        stateCode = 1
    elseif AttributeSystem:getIndex(player) == index then
        stateCode = 2
    else
        local preIndex = AttributeSystem:getIndex(player)
        AttributeSystem:setIndex(player, index)
        --- 保存数据
        PlayerDataHelper:saveAttributeData(player, true)

        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_POINT_SET_INDEX, true, player, index, preIndex)
    end

    player:sendPacket({
        pid = "S2CUpdatePointSetIndex",
        stateCode = stateCode,
        idx = index,
    })
end

--- 重置属性方案
---@param packet any
function handles:C2SResetPointSet(packet)
    ---@type Entity
    local player = self
    local stateCode = 0
    local index = packet.idx

    local cost = AttributeSystem:getResetCostCube()
    local freeResetTimes = AttributeSystem:getFreeResetTimes()
    local rtimes = AttributeSystem:getResetTimes(player)

    if rtimes < freeResetTimes then
        --- 直接解锁
        if AttributeSystem:clearAttributeData(player, index) then
            AttributeSystem:setResetTimes(player, rtimes + 1)
            --- 保存数据
            PlayerDataHelper:saveAttributeData(player, true)
        else
            stateCode = 4
        end

        if stateCode == 0 then
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_RESET_POINT_SET, true, player, index)
        end
    else
        if WalletSystem:getCube(player) < cost then
            stateCode = 1
        else
            WalletSystem:payCube(
                player,
                "reset_point_set",
                cost,
                function(success)
                    if not player or not player:isValid() then
                        return
                    end

                    if success then
                        if AttributeSystem:clearAttributeData(player, index) then
                            AttributeSystem:setResetTimes(player, rtimes + 1)
                            --- 保存数据
                            PlayerDataHelper:saveAttributeData(player, true)
                        else
                            stateCode = 3
                        end
                    else
                        stateCode = 2
                    end

                    if stateCode == 0 then
                        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_RESET_POINT_SET, true, player, index)
                    end

                    player:sendPacket({
                        pid = "S2CResetPointSet",
                        stateCode = stateCode,
                        idx = index,
                    })
                end,
                1,
                "reset_point_set_index_" .. index
            )
            
            return
        end
    end

    player:sendPacket({
        pid = "S2CResetPointSet",
        stateCode = stateCode,
        idx = index,
    })
end

--- 切换能力
---@param packet any
function handles:C2SSwitchAbility(packet)
    local aid = packet.aid
    local player = self
    local stateCode = 0
    ---@type Ability
    local ability = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, aid)
    if not ability then
        stateCode = 1
    else
        if BattleManagerServer:instance():switchAbility(player, ability) then
            PlayerDataHelper:saveAbilityData(player, true)
        else
            stateCode = 2
        end
    end

    player:sendPacket({
        pid = "S2CSwitchAbility",
        stateCode = stateCode,
        aid = aid
    })
end

--- 丢弃能力
---@param packet any
function handles:C2SDropAbility(packet)
    local aid = packet.aid
    local player = self
    local stateCode = 0
    ---@type Ability
    local toAbility = nil
    ---@type Ability, number, Slot
    local ability, slotIndex, slot = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, aid)

    if not ability or slot:getAmount() <= 0 then
        stateCode = 1
    elseif ability:getItemAlias() == Define.ITEM_ALIAS.DEFAULT_ABILITY then
        stateCode = 2
    else
        ---@type Ability
        local currentAbility = AbilitySystem:getAbility(player)
        --- 若丢弃的是当前的能力
        if currentAbility and currentAbility:getId() == aid then
            --- 获取替换的能力
            toAbility = InventorySystem:getItemByItemAlias(player, Define.INVENTORY_TYPE.ABILITY, Define.ITEM_ALIAS.DEFAULT_ABILITY)
            if not toAbility then
                stateCode = 3
            end
        end

        local itemConfig = ItemConfig:getCfgByItemId(ability:getItemId())
		local isDiscard = itemConfig.isDiscard == 1
		if not isDiscard then
            stateCode = 4
		end

        if stateCode == 0 then
            InventorySystem.MODIFY_SOURCE = "self"
            if InventorySystem:changeItemNumById(player, Define.INVENTORY_TYPE.ABILITY, ability:getId(), -1) then
                --- 保存数据
                PlayerDataHelper:saveInventoryData(player, true)

                --- 触发物品掉落
                Plugins.CallTargetPluginFunc("scene_object", "onDropAbility", player, ability)

                if toAbility then
                    --- 切换能力
                    BattleManagerServer:instance():switchAbility(player, toAbility)
                    --- 保存数据
                    PlayerDataHelper:saveAbilityData(player, true)
                end

                Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_DROP_ABILITY, true, player, ability)
            else
                stateCode = 4
            end
            InventorySystem.MODIFY_SOURCE = nil
        end
    end

    player:sendPacket({
        pid = "S2CDropAbility",
        stateCode = stateCode,
        aid = aid,
        to = toAbility and toAbility:getId() or nil,
    })
end

--- 检视能力
---@param packet any
function handles:C2SInspectAbility(packet)
    ---@type Entity
    local player = self
    local ids = packet.ids
    if ids and #ids > 0 then
        local slots = InventorySystem:getAllSlots(player, Define.INVENTORY_TYPE.ABILITY)
        if slots then
            local len = #ids
            local idMap = {}
            for _, id in pairs(ids) do
                idMap[id] = true
            end
            local save = false
            ---@type number, Slot
            for _, slot in pairs(slots) do
                ---@type Ability
                local ability = slot:getItem()
                if ability then
                    local id = ability:getId()
                    if idMap[id] then
                        ability:setUnlimitedInspected(1)
                        save = true
                        idMap[id] = false
                        len = len -1
                    end
                end
                if len <= 0 then
                    break
                end
            end
            if save then
                PlayerDataHelper:saveInventoryData(player, true)
            end
        end
        
    end
end

--- 使用物品
---@param packet any
function handles:C2SUseItem(packet)
    ---@type Entity
    local player = self
    local itemId = packet.itemId
    local id = packet.id
    local consume = packet.amount or 1
    local stateCode = 0

    local itemType = ItemConfig:getTypeByItemId(itemId)
    local inventoryType = Define.ITEM_INVENTORY_TYPE[itemType]

    if itemType == Define.ITEM_TYPE.ABILITY then
        ---@type Ability
        local ability = AbilitySystem:getAbility(player)
        if ability and ability:getId() == id then
            stateCode = 1
        elseif ItemConfig:getCfgByItemId(itemId).item_alias == Define.ITEM_ALIAS.DEFAULT_ABILITY then
            stateCode = 2
        end
    end

    local rewards = nil

    if stateCode == 0 then
        ---@type boolean, Item
        InventorySystem.MODIFY_SOURCE = Define.ITEM_REWARD_SOURCE[Define.REWARD_TYPE.USE_ITEM]
        local success, item = InventorySystem:changeItemNumById(player, inventoryType, id, -consume)
        InventorySystem.MODIFY_SOURCE = nil
        if success then
            PlayerDataHelper:saveInventoryData(player, true)
            if itemType == Define.ITEM_TYPE.ABILITY then
                --- 切换能力
                BattleManagerServer:instance():switchAbility(player, item)
                PlayerDataHelper:saveAbilityData(player, true)
            elseif itemType == Define.ITEM_TYPE.BUFF_CARD then
                --- 触发buff
                BuffManagerServer:instance():useBuffCard(player, item:getItemId())
            elseif itemType == Define.ITEM_TYPE.GIFT_PACK then
                local success, reList = RewardHelper:useItem(player, item)
                if success then
                    rewards = reList
                end
            end
        else
            stateCode = 2
        end
    end

    player:sendPacket({
        pid = "S2CUseItem",
        stateCode = stateCode,
        id = id,
        itemId = itemId,
        consume = packet.amount,
        rewards = rewards,
    })
end

--- 检视物品
---@param packet any
function handles:C2SInspectItem(packet)
    ---@type Entity
    local player = self

    local ids = packet.ids
    local itemIds = packet.itemIds
    local save = false

    for index, itemId in pairs(itemIds) do
        local inventoryType = Define.ITEM_INVENTORY_TYPE[ItemConfig:getTypeByItemId(itemId)]
        ---@type Item
        local item = InventorySystem:getItemById(player, inventoryType, ids[index])
        if item then
            item:setInspected(1)
            save = true
        end
    end

    if save then
        PlayerDataHelper:saveInventoryData(player, true)
    end
end

--- 丢弃物品
---@param packet any
function handles:C2SDropItem(packet)
    ---@type Entity
    local player = self
    local itemId = packet.itemId
    local id = packet.id
    local stateCode = 0
    local amount = packet.amount or 1

    local config = ItemConfig:getCfgByItemId(itemId)
    local isDiscard = config.isDiscard == 1
    local itemType = config.type_alias
    local alias = config.item_alias

    if not isDiscard or alias == Define.ITEM_ALIAS.DEFAULT_ABILITY then
        stateCode = 1
    else
        local inventoryType = Define.ITEM_INVENTORY_TYPE[itemType]
        InventorySystem.MODIFY_SOURCE = "scene"
        ---@type boolean, Item
        local success, item = InventorySystem:changeItemNumById(player, inventoryType, id, -amount)
        InventorySystem.MODIFY_SOURCE = nil
        if success then
            --- 保存数据
            PlayerDataHelper:saveInventoryData(player, true)

            --- 触发物品掉落
            Plugins.CallTargetPluginFunc("scene_object", "onDropItem", player, item)

            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_DROP_ITEM, true, player, item, amount)
        else
            stateCode = 2
        end
    end

    player:sendPacket({
        pid = "S2CDropItem",
        stateCode = stateCode,
        id = id,
        itemId = itemId,
        amount = packet.amount,
    })
end

--- 能力觉醒
---@param packet any
function handles:C2SAbilityAwake(packet)
    ---@type Entity
    local player = self
    local awake = nil
    local abilityId = nil
    local id = packet.id
    local stateCode = 0

    ---@type Ability
    local ability = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, id)
    if not ability or not AbilityAwakeConfig:canAwake(ability:getItemId()) then
        stateCode = 1
    else
        awake = ability:getAwake() + 1
        abilityId = ability:getItemId()
        local config = AbilityAwakeConfig:getCfgByAbilityId(abilityId)
        local coin_nums = config.coin_nums
        local item_nums = config.item_nums
        local item_costs = config.item_costs
        local max_awake = config.max_awake
        if awake > max_awake then
            --- 觉醒等级不对
            stateCode = 2
        else
            local enough = true
            --- 判断金币是否足够
            if coin_nums[awake] and coin_nums[awake] > 0 then
                local myGold = WalletSystem:getCoin(player, Define.ITEM_ALIAS.GOLD_COIN)
                enough = myGold >= coin_nums[awake]
            end
            --- 判断当前能力数量
            if enough and item_nums[awake] and item_nums[awake] > 0 then
                local curNum = InventorySystem:getItemAmountById(player, Define.INVENTORY_TYPE.ABILITY, id)
                enough = curNum >= item_nums[awake]
            end
            --- 判断数量
            if enough and item_costs[awake] then
                for _, item in pairs(item_costs[awake]) do
                    local itemType = ItemConfig:getCfgByItemAlias(item.item_alias).type_alias
                    local inventoryType = Define.ITEM_INVENTORY_TYPE[itemType]
                    local curNum = InventorySystem:getItemAmountByItemAlias(player, inventoryType, item.item_alias)
                    if curNum < item.item_num then
                        enough = false
                        break
                    end
                end  
            end
                       
            if enough then
                InventorySystem.MODIFY_SOURCE = "awake_cost"
                --- 消耗金币
                if coin_nums[awake] and coin_nums[awake] > 0 then
                    WalletSystem:payCoin(player, Define.ITEM_ALIAS.GOLD_COIN, coin_nums[awake], false, false, "ability_awake_" .. abilityId)
                end
                if item_nums[awake] and item_nums[awake] > 0 then
                    InventorySystem:changeItemNumById(player, Define.INVENTORY_TYPE.ABILITY, id, -item_nums[awake])
                end
                --- 消耗物品
                if item_costs[awake] then
                    for _, item in pairs(item_costs[awake]) do
                        local itemType = ItemConfig:getCfgByItemAlias(item.item_alias).type_alias
                        local inventoryType = Define.ITEM_INVENTORY_TYPE[itemType]
                        InventorySystem:changeItemNumByItemAlias(player, inventoryType, item.item_alias, -item.item_num)
                    end
                end
                InventorySystem.MODIFY_SOURCE = nil
                --- 设置觉醒等级
                AbilitySystem:setAbilityAwake(player, id, awake)
                --- 保存数据
                PlayerDataHelper:saveInventoryData(player, true)

                Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY_AWAKE, true, player, ability)
            else
                --- 消耗数量不足
                stateCode = 3
            end
        end
    end

    player:sendPacket({
        pid = "S2CAbilityAwake",
        awake = awake,
        abilityId = abilityId,
        id = id,
        stateCode = stateCode,
    })
end

--- 切换能力皮肤
---@param packet any
function handles:C2SSwitchAbilitySkin(packet)
    ---@type Entity
    local player = self
    local unequip = packet.unequip
    local stateCode = 0
    local abilityId = nil
    if unequip then
        ---@type Ability
        local ability = AbilitySystem:getAbility(player)
        if ability then
            abilityId = ability:getItemId()
            AbilitySystem:setAbilitySkin(player, abilityId)
            PlayerDataHelper:saveAbilityData(player)
        else
            stateCode = 1
        end
    else
        abilityId = packet.abilityId
        AbilitySystem:setAbilitySkin(player, abilityId)
        PlayerDataHelper:saveAbilityData(player)
    end
    player:sendPacket({
        pid = "S2CSwitchAbilitySkin",
        abilityId = abilityId,
        awake = packet.awake,
        stateCode = stateCode,
        unequip = unequip,
    })
end

--- 客户端请求扣除耐力
---@param packet any
function handles:C2SClientChangeMp(packet)
    local player = self
    local skills = packet.skills
    if type(skills) == 'table' then
        local mp = 0
        for _, skillId in pairs(skills) do
            local config = SkillConfig:getSkillConfig(skillId or 0)
            if config and config.mpCost then
                mp = mp + config.mpCost
            end
        end
        BattleSystem:changeMp(player, -mp)
    else
        local config = SkillConfig:getSkillConfig(skills or 0)
        if config and config.mpCost then
            local mp = config.mpCost
            BattleSystem:changeMp(player, -mp)
        end
    end
    return self:getCurMp()
end

--- 处理奖励
---@param packet any
function handles:C2SGetSubscribeVipAbility(packet)
    local player = self
    local alias = packet.alias
    RewardHelper:gainSubscribeVipAbility(player, alias)
end

---@type GameRoleCommonGMHelperServer
local GameRoleCommonGMHelperServer = T(Lib, "GameRoleCommonGMHelperServer")

--- gm指令集
---@param packet any
function handles:C2SGMGameRoleCommon(packet)
    local player = self
    local stateCode = GameRoleCommonGMHelperServer:onCommandHandle(player, packet)
    return stateCode
end
