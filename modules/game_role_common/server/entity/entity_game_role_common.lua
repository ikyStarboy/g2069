---
--- Generated by PluginCreator
--- game_role_common entity
--- DateTime:2023-03-03
---

local Entity = Entity
local EntityServer = EntityServer
--buff key:
--function Entity.EntityProp:xxx(value, add, buff)
--end

---@type AbnormalComponent
local AbnormalComponent = require "common.component.abnormal_component"
---@type InventoryComponent
local InventoryComponent = require "common.component.inventory_component"
---@type EquipmentComponent
local EquipmentComponent = require "common.component.equipment_component"

---@type AttributeComponentServer
local AttributeComponentServer = require "server.component.attribute_component"
---@type AbilityComponentServer
local AbilityComponentServer = require "server.component.ability_component"
---@type BuffComponent
local BuffComponent = require "common.component.buff_component"
---@type GrowthComponentServer
local GrowthComponentServer = require "server.component.growth_component"
---@type SkinComponentServer
local SkinComponentServer = require "server.component.skin_component"
---@type MapManagerServer
local MapManagerServer = require "server.manager.game_map_manager"
---@type BusinessComponent
local BusinessComponent = require "common.component.business_component"
---@type GameSkillHelper
local GameSkillHelper = T(Lib, "GameSkillHelper")
---@type AttributeSystem
local AttributeSystem = T(Lib, "AttributeSystem")
---@type LuaTimer
local LuaTimer = T(Lib, "LuaTimer")
---@type BattleSystem
local BattleSystem = T(Lib, "BattleSystem")
---@type SkinSystem
local SkinSystem = T(Lib, "SkinSystem")
---@type AbilitySystem
local AbilitySystem = T(Lib, "AbilitySystem")
---@type AbilityConfig
local AbilityConfig = T(Config, "AbilityConfig")
---@type MonsterConfig
local MonsterConfig = T(Config, "MonsterConfig")
---@type GrowthSystem
local GrowthSystem = T(Lib, "GrowthSystem")

--- 重载onCreateExtend
function Entity:onCreateExtend()
    if not self.isCompInited then
        self.isCompInited = true
        --- 判断是否玩家
        if self.isPlayer then
            --- 成长组件
            self:addComponent("growth", GrowthComponentServer:new(self))
            --- 背包组件
            self:addComponent("inventory", InventoryComponent:new(self))
            --- 装备组件
            self:addComponent("equipment", EquipmentComponent:new(self))
            --- 能力组件
            self:addComponent("ability", AbilityComponentServer:new(self))
            --- 属性组件
            self:addComponent("attribute", AttributeComponentServer:new(self))
            --- 异常状态组件
            self:addComponent("abnormal", AbnormalComponent:new(self))
            --- buff组件
            self:addComponent("buff", BuffComponent:new(self))
            --- 皮肤组件
            self:addComponent("skin", SkinComponentServer:new(self))
            --- 交易组件
            self:addComponent("business", BusinessComponent:new(self))
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ROLE_CREATE, self, true)
        elseif self:isMonster() then
            --- 属性组件
            self:addComponent("attribute", AttributeComponentServer:new(self))
            --- 异常状态组件
            self:addComponent("abnormal", AbnormalComponent:new(self))
            --- buff组件
            self:addComponent("buff", BuffComponent:new(self))

            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ROLE_CREATE, self)
        end
    end
end

--- 闪避时机
---@param attacker Entity 攻击者
---@param data AttackParam 伤害公式数据
function Entity:onDodge(attacker)
    local currentAbility = AbilitySystem:getAbility(self)
    if currentAbility then
        local cfg=AbilityConfig:getCfgByAbilityId(currentAbility:getItemId())
        if cfg and cfg.missBuffId and  cfg.missBuffId > 0 then
            self:updateSkillBuffById(cfg.missBuffId, true)
        end
    end
    local packet = {
        pid = "SyncPlayerOnDodge",
        attackerID = attacker.objID,
        defenderID = self.objID,
    }
    self:sendPacketToTracking(packet, self.isPlayer)
end

--- 死亡时机
---@param attacker Entity 攻击者
---@param data AttackParam 伤害公式数据
function Entity:onDeadExtend(attacker, data)
    local dangerValueChangedPlayer={}
    --- 移除所有buff
    self:removeTypeBuff("deadRemove", true)

    if self:isMonster() and attacker and attacker:isValid() and attacker.isPlayer then
        local monsterId = self:getMonsterId()
        local params = {
            monsterId = monsterId
        }
        attacker:checkUpdateTaskData(Define.TargetConditionKey.KILL, params)

        local dangerValue = attacker:getDangerValue()
        if dangerValue < World.cfg.game_role_commonSetting.dangerMonsterLimit then
            local monsterCfg = MonsterConfig:getCfgByMonsterId(monsterId)
            if monsterCfg and monsterCfg.dangerExp > 0 then
                if dangerValue + monsterCfg.dangerExp >= World.cfg.game_role_commonSetting.dangerMonsterLimit then
                    attacker:setDangerValue(World.cfg.game_role_commonSetting.dangerMonsterLimit)
                else
                    attacker:setDangerValue(dangerValue + monsterCfg.dangerExp)
                end
                table.insert(dangerValueChangedPlayer,attacker.platformUserId)
            end
        end

        attacker:setCountKillMonster(attacker:getCountKillMonster() + 1)
        if self:isBossMonster() then
            attacker:setCountKillBoss(attacker:getCountKillBoss() + 1)
            local defaultData = {
                monster_id_alias = self:getMonsterAlias()
            }
            Plugins.CallTargetPluginFunc("report", "report", "kill_monster_boss", defaultData, attacker)
        end

        if attacker:getCountKillMonster() == 1 then
            Plugins.CallTargetPluginFunc("report", "report", "frist_kill_monster", nil, attacker)
        end
    end
    self:enterStateType(Define.RoleStatus.DEAD)
    Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ROLE_DEAD, self)

    if self.isPlayer and attacker.isPlayer then
        local dangerChangeVal = 0
        if self and self:isValid() and attacker and attacker:isValid() and (self.objID ~= attacker.objID) then
            local dayKilledOther = self:getDayKilledOther()
            if dayKilledOther[attacker.platformUserId] then
                dayKilledOther[attacker.platformUserId] = dayKilledOther[attacker.platformUserId] + 1
            else
                dayKilledOther[attacker.platformUserId] = 1
            end
            self:setDayKilledOther(dayKilledOther)

            local attackKilled = attacker:getDayKilledOther()
            local attackKilledNum = attackKilled[self.platformUserId] or 0

            local defenderDangerValue = self:getDangerValue()
            local defenderLevel = GrowthSystem:getLevel(self)
            local attackerLevel = GrowthSystem:getLevel(attacker)
            if defenderDangerValue <= World.cfg.game_role_commonSetting.dangerProtectVal then
                Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", "g2069_danger_limit_tips", attacker)
            elseif math.abs(attackerLevel - defenderLevel) >= World.cfg.game_role_commonSetting.dangerProtectLv then
                Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", "g2069_danger_limit_tips", attacker)
            elseif dayKilledOther[attacker.platformUserId] + attackKilledNum > World.cfg.game_role_commonSetting.dangerPlayerLimit then
                Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", "g2069_danger_day_tips", self)
                Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", "g2069_danger_day_tips", attacker)
            else
                local attackDangerValue = attacker:getDangerValue()
                local changeNum = math.floor(defenderDangerValue*World.cfg.game_role_commonSetting.pvpDangerChange)
                if defenderDangerValue - changeNum < World.cfg.game_role_commonSetting.dangerProtectVal then
                    changeNum = defenderDangerValue - World.cfg.game_role_commonSetting.dangerProtectVal
                elseif defenderDangerValue - changeNum < 0 then
                    changeNum = defenderDangerValue
                end
                local max=World.cfg.game_role_commonSetting.dangerChangeMax or 10000
                changeNum=math.min(max,changeNum)
                dangerChangeVal = changeNum
                self:setDangerValue(defenderDangerValue - changeNum)
                attacker:setDangerValue(attackDangerValue + changeNum)
                table.insert(dangerValueChangedPlayer,attacker.platformUserId)
                table.insert(dangerValueChangedPlayer,self.platformUserId)
            end
        end

        if attacker and attacker:isValid() then
            attacker:setCountKillOther(attacker:getCountKillOther() + 1)
            local defaultData = {
                obtain_danger_exp = dangerChangeVal
            }
            Plugins.CallTargetPluginFunc("report", "report", "kill_other", defaultData, attacker)

            if attacker:getCountKillOther() == 1 then
                Plugins.CallTargetPluginFunc("report", "report", "frist_kill_ohter", nil, attacker)
            end

        end
        if self and self:isValid() then
            self:setCountKilledOther(self:getCountKilledOther() + 1)
            local defaultData = {
                lost_dangerou_value = dangerChangeVal,
                other_level = 0,
                other_danger_exp = 0,
            }
            if attacker and attacker:isValid() then
                if attacker.isPlayer then
                    defaultData.other_level = GrowthSystem:getLevel(attacker)
                    defaultData.other_danger_exp = attacker:getDangerValue()
                elseif attacker:isMonster() then
                    local monsterId = attacker:getMonsterId()
                    local monsterCfg = MonsterConfig:getCfgByMonsterId(monsterId)
                    if monsterCfg then
                        defaultData.other_level = monsterCfg.monsterLevel
                    end
                end
            end
            Plugins.CallTargetPluginFunc("report", "report", "killed_other", defaultData, self)

            if self:getCountKilledOther() == 1 then
                Plugins.CallTargetPluginFunc("report", "report", "frist_killed_ohter", nil, self)
            end
        end
    end

    if self.isPlayer and attacker:isMonster() then
        if self and self:isValid() then
            self:setCountKilledMonster(self:getCountKilledMonster() + 1)

            local defaultData = {
                monster_id_alias = attacker:getMonsterAlias()
            }
            Plugins.CallTargetPluginFunc("report", "report", "killed_monster", defaultData, self)

            if self:getCountKilledMonster() == 1 then
                Plugins.CallTargetPluginFunc("report", "report", "frist_killed_monster", nil, self)
            end

            local monsterId = attacker:getMonsterId()
            local dangerValue = self:getDangerValue()
            local monsterCfg = MonsterConfig:getCfgByMonsterId(monsterId)
            if monsterCfg and monsterCfg.dangerExp > 0 then
                if dangerValue - monsterCfg.dangerExp > 0 then
                    self:setDangerValue(dangerValue - monsterCfg.dangerExp)
                else
                    self:setDangerValue(0)
                end
                table.insert(dangerValueChangedPlayer,self.platformUserId)
            end
        end
    end
    if next(dangerValueChangedPlayer)~=nil then
        Lib.emitEvent(Event.EVENT_GAME_ROLE_DANGER_VALUE_CHANGE,dangerValueChangedPlayer)
    end
end

--- 被击时机
---@param attacker Entity
---@param param AttackParam
function Entity:onDefend(attacker, param)
    if self:isMonster() and param.damage > 0 then
        self:handleAIEvent("onHurt", attacker, param.damage)
    end
    if self.isPlayer then
        if not self:isFirstBeHitEntity() and attacker and attacker:isValid() then
            self:setFirstBeHitEntity(1)
            local rdata = {}
            rdata.be_attacked_type = param and param.skillId or 0
            if attacker:isMonster() then
                rdata.attacked_object = "monster"
                rdata.attacked_object_level = attacker:getMonsterLevel()
            else
                rdata.attacked_object = "player"
                rdata.attacked_object_level = GrowthSystem:getLevel(attacker)
            end
            rdata.damage = math.ceil(param and param.damage or 0)
            Plugins.CallTargetPluginFunc("report", "report", "first_be_attacked", rdata, self)
        end


        ---@type BattleSystem
        local BattleSystem = T(Lib, "BattleSystem")
        if not BattleSystem:isDead(self) then
            self:enterStateType(Define.RoleStatus.BATTLE_STATE)
        end
        GameSkillHelper:shootDownFlyPlayer(self,attacker,param)
        if attacker.isPlayer then
            local safeType = attacker:getSafeModeType()
            if safeType ~= Define.PKModeType.pk2 then
                attacker:setSafeModeType(Define.PKModeType.pk2)
            end
        end
    elseif self:isMonster() then
        GameSkillHelper:setEntityBlowAway(self,attacker,param)
    end
end

--- 攻击时机
---@param defender Entity 被击者
---@param data AttackParam 伤害公式数据
function Entity:onAttack(defender, data)
    if self.isPlayer and defender and defender:isValid() then
        if defender:isMonster() then
            if not self:isFirstHitMonster() then
                self:setFirstHitMonster(1)
                local rdata = {}
                rdata.monster_id_alias = tostring(defender:getMonsterAlias())
                Plugins.CallTargetPluginFunc("report", "report", "first_hit_monster", rdata, self)
            end
        end
        if not self:isFirstHitEntity() then
            self:setFirstHitEntity(1)
            local rdata = {}
            rdata.attack_type = data and data.skillId or 0
            if defender:isMonster() then
                rdata.hit_object = "monster"
                rdata.hit_object_level = defender:getMonsterLevel()
            else
                rdata.hit_object = "player"
                rdata.hit_object_level = GrowthSystem:getLevel(defender)
            end
            rdata.damage = math.ceil(data and data.damage or 0)
            Plugins.CallTargetPluginFunc("report", "report", "first_attack", rdata, self)
        end
    end

end

--- 消亡时机
function Entity:onDestroyExtend(attacker)
    self:exitStateType(Define.RoleStatus.DEAD)
    if self.isPlayer then
        self:exitStateType(Define.RoleStatus.BATTLE_STATE)
        BattleSystem:resetHp(self)
        BattleSystem:resetMp(self)

        if Plugins.CallTargetPluginFunc("game_mission", "deadQuitMission", self) then
            --- 不做处理
            
        elseif not MapManagerServer:instance():backRebornPosition(self) then
            MapManagerServer:instance():gotoMap(self, World.cfg.defaultMap)
        end
        self:addBuff(self:cfg().reviveEffect or "myplugin/revive_effect_buff", self:cfg().reviveEffectTime or 20)
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ROLE_REVIVE, self)
        self:sendPacket({
            pid = "S2CPlayerRevive"
        })
        self:noticePlaySound("entity_revival")
        if attacker and attacker.isPlayer then
            self:setSafeModeType(Define.PKModeType.safe)
        end
    else
        self:exitStateType(Define.RoleStatus.BATTLE_STATE)
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ROLE_DESTROY, self)
        Plugins.CallTargetPluginFunc("monster_manager", "doDestroyMonster", self.objID)
    end
end

--- 跨天数据处理
function Entity:autoDataExpire()
    self:resetMissionCountInfo()
end

--- 加法
---@param value any
---@param add any
---@param buff any
function Entity.EntityProp:attribute(value, add, buff)
    local bonusSource = buff.cfg.buffName .. "_" .. buff.id
    if add then
        for id, val in pairs(value) do
            AttributeSystem:addBonus(self, id, val, Define.ATTR_MOD_TYPE.RAW, bonusSource)
        end
    else
        AttributeSystem:removeAllModifiersFromSource(self, bonusSource)
    end
end

--- 乘法
---@param value any
---@param add any
---@param buff any
function Entity.EntityProp:attribute_pct(value, add, buff)
    local bonusSource = buff.cfg.buffName .. "_" .. buff.id
    if add then
        for id, val in pairs(value) do
            AttributeSystem:addBonus(self, id, val, Define.ATTR_MOD_TYPE.PERCENTADD, bonusSource)
        end
    else
        AttributeSystem:removeAllModifiersFromSource(self, bonusSource)
    end
end

function Entity.EntityProp:partChange(value, add, buff)
    local part = Lib.splitString(value, "#")
    if add then
        SkinSystem:changeBuffSkinPart(self, part[1], part[2])
    else
        SkinSystem:changeBuffSkinPart(self, part[1], "")
    end
end

--- 修改血量
---@param value any
---@param add any
---@param buff any
function Entity.EntityProp:addHpPct(value, add, buff)
    local cfg = buff.cfg
    local key = cfg.buffName .. "_" .. buff.id

    self._addHpPctTimer = self._addHpPctTimer or {}
    local timer = self._addHpPctTimer
    if timer[key] then
        LuaTimer:cancel(timer[key])
        timer[key] = nil
    end

    if add then
        ---@type Entity
        local holder = self
        ---@type BattleManagerServer
        local BattleManagerServer = require "server.manager.battle_manager"
        ---@type BattleManagerServer
        local mgr = BattleManagerServer:instance()
        ---@type Entity
        local from = buff.from or holder
        --- 依据等级差做处理
        local casterLevelScale = cfg.casterLevelScale
        if casterLevelScale then
            local casterLv = from:isMonster() and from:getMonsterLevel() or GrowthSystem:getLevel(from)
            local holderLv = holder:isMonster() and holder:getMonsterLevel() or GrowthSystem:getLevel(holder)
            local diffLv = casterLv - holderLv
            if diffLv < 0 then
                diffLv = math.abs(diffLv)
                local rate = nil
                for _, param in pairs(casterLevelScale) do
                    if diffLv < param[1] then
                        break
                    end
                    rate = param[2]
                end
                if rate then
                    value = value * rate
                end
            end
        end

        local func = function()
            if holder and holder:isValid() then
                local maxHp = AttributeSystem:getAttributeValue(holder, Define.ATTR.MAX_HP)
                local hp = math.abs(maxHp * value)
                if value > 0 then
                    BattleSystem:changeHp(holder, hp)
                else
                    if from and from:isValid() then
                        -- BattleSystem:changeHp(holder, -hp)
                        --- 直接扣除伤害，先处理成自己对自己造成伤害
                        mgr:directAttack(from, holder, hp)
                    else
                        return false
                    end
                end
                return true
            end
        end
        --- 单位帧
        local interval = cfg.interval
        if interval and interval ~=0 then
            timer[key] = LuaTimer:scheduleTicker(function()
                if not func() then
                    LuaTimer:cancel(timer[key])
                    timer[key] = nil
                end
            end, interval)
        end
        func()
    end
end

--- 修改血量
---@param value any
---@param add any
---@param buff any
function Entity.EntityProp:addHp(value, add, buff)
    local cfg = buff.cfg
    local key = cfg.buffName .. "_" .. buff.id

    self._addHpTimer = self._addHpTimer or {}
    local timer = self._addHpTimer
    if timer[key] then
        LuaTimer:cancel(timer[key])
        timer[key] = nil
    end

    if add then
        ---@type Entity
        local holder = self
        ---@type BattleManagerServer
        local BattleManagerServer = require "server.manager.battle_manager"
        ---@type BattleManagerServer
        local mgr = BattleManagerServer:instance()
        ---@type Entity
        local from = buff.from or holder
        --- 依据等级差做处理
        local casterLevelScale = cfg.casterLevelScale
        if casterLevelScale then
            local casterLv = from:isMonster() and from:getMonsterLevel() or GrowthSystem:getLevel(from)
            local holderLv = holder:isMonster() and holder:getMonsterLevel() or GrowthSystem:getLevel(holder)
            local diffLv = casterLv - holderLv
            if diffLv < 0 then
                diffLv = math.abs(diffLv)
                local rate = nil
                for _, param in pairs(casterLevelScale) do
                    if diffLv < param[1] then
                        break
                    end
                    rate = param[2]
                end
                if rate then
                    value = value * rate
                end
            end
        end

        local func = function()
            if holder and holder:isValid() then
                local hp = math.abs(value)
                if value > 0 then
                    BattleSystem:changeHp(holder, hp)
                else
                    if from and from:isValid() then
                        -- BattleSystem:changeHp(holder, -hp)
                        --- 直接扣除伤害，先处理成自己对自己造成伤害
                        mgr:directAttack(from, holder, hp)
                    else
                        return false
                    end
                end
                return true
            end
        end
        
        --- 单位帧
        local interval = cfg.interval
        if interval and interval ~=0 then
            timer[key] = LuaTimer:scheduleTicker(function()
                if not func() then
                    LuaTimer:cancel(timer[key])
                    timer[key] = nil
                end
            end, interval)
        end
        func()
    end
end

--- 修改精力
---@param value any
---@param add any
---@param buff any
function Entity.EntityProp:addMpPct(value, add, buff)
    local cfg = buff.cfg
    local key = cfg.buffName .. "_" .. buff.id
    self._addMpPctTimer = self._addMpPctTimer or {}
    local timer = self._addMpPctTimer
    if timer[key] then
        LuaTimer:cancel(timer[key])
        timer[key] = nil
    end
    if add then
        ---@type Entity
        local player = self
        local func = function()
            if player and player:isValid() then
                local maxMp = AttributeSystem:getAttributeValue(player, Define.ATTR.MAX_MP)
                local mp = math.abs(maxMp * value)
                if value > 0 then
                    BattleSystem:changeMp(player, mp)
                else
                    BattleSystem:changeMp(player, -mp)
                end
                return true
            end
        end
        --- 单位帧
        local interval = cfg.interval
        if interval and interval ~=0 then
            timer[key] = LuaTimer:scheduleTicker(function()
                if not func() then
                    LuaTimer:cancel(timer[key])
                    timer[key] = nil
                end
            end, interval)
        end
        func()
    end
end

--- 修改精力
---@param value any
---@param add any
---@param buff any
function Entity.EntityProp:addMp(value, add, buff)
    local cfg = buff.cfg
    local key = cfg.buffName .. "_" .. buff.id
    self._addMpTimer = self._addMpTimer or {}
    local timer = self._addMpTimer
    if timer[key] then
        LuaTimer:cancel(timer[key])
        timer[key] = nil
    end
    if add then
        ---@type Entity
        local player = self
        local func = function()
            if player and player:isValid() then
                local mp = math.abs(value)
                if value > 0 then
                    BattleSystem:changeMp(player, mp)
                else
                    BattleSystem:changeMp(player, -mp)
                end
                return true
            end
        end
        --- 单位帧
        local interval = cfg.interval
        if interval and interval ~=0 then
            timer[key] = LuaTimer:scheduleTicker(function()
                if not func() then
                    LuaTimer:cancel(timer[key])
                    timer[key] = nil
                end
            end, interval)
        end
        func()
    end
end

function Entity.EntityProp:dizziness(value, add, buff)
    if add then
        self:enterStateType(Define.RoleStatus.VERTIGO)
    else
        self:exitStateType(Define.RoleStatus.VERTIGO)
    end
end

function Entity.EntityProp:knockDown(value, add, buff)
    if value then
        if add then
            self:enterStateType(Define.RoleStatus.KNOCK_DOWN,buff.cfg.fullName,buff.cfg.knockDownTime)
        else
            self:exitStateType(Define.RoleStatus.KNOCK_DOWN)
        end
    end
end

function Entity.EntityProp:flyMode(value, add, buff)
    if value then
        if add then
            self:changeFlyMode(1)
            --local movePos = Lib.v3(0,1,0)
            --self:setForceMoveToAll(movePos, 10)
        else
            self:changeFlyMode(0)
        end
    end
end

function Entity.EntityProp:skillSpeedUp(value, add, buff)
    if value then
        if add then
            self:addSkillSpeedUp(value)
        else
            self:addSkillSpeedUp(-value)
        end
    end
end

function Entity.EntityProp:childActor(value, add, buff)
    --print(">>>>>>>>>>>>>>>>>>>>>EntityProp:childActor ",Lib.v2s(value),add)
    if value then
        self:setCurChildActor(add and value.actorName or nil)
    end
end

function Entity:onEntityLeave()
    if self._addHpTimer then
        for _, v in pairs(self._addHpTimer) do
            LuaTimer:cancel(v)
        end
        self._addHpTimer = nil
    end
    if self._addHpPctTimer then
        for _, v in pairs(self._addHpPctTimer) do
            LuaTimer:cancel(v)
        end
        self._addHpPctTimer = nil
    end
end