---
--- Generated by PluginCreator
--- game_role_common handler
--- DateTime:2023-03-03
---

---@type GameLib
local GameLib = T(Lib, "GameLib")
---@type AbilitySystem
local AbilitySystem = T(Lib, "AbilitySystem")
---@type AttributeSystem
local AttributeSystem = T(Lib, "AttributeSystem")
---@type GrowthSystem
local GrowthSystem = T(Lib, "GrowthSystem")
---@type MonsterConfig
local MonsterConfig = T(Config, "MonsterConfig")
---@type ItemConfig
local ItemConfig = T(Config, "ItemConfig")
---@type TaskConfig
local TaskConfig = T(Config, "TaskConfig")
---@type NpcDialogueReplyConfig
local NpcDialogueReplyConfig = T(Config, "NpcDialogueReplyConfig")
---@type BattleManagerClient
local BattleManagerClient = require "client.manager.battle_manager"
---@type AbilityAwakeConfig
local AbilityAwakeConfig = T(Config, "AbilityAwakeConfig")
---@type MissionInfoConfig
local MissionInfoConfig = T(Config, "MissionInfoConfig")
---@type InventorySystem
local InventorySystem = T(Lib, "InventorySystem")
---@type AttackParam
local AttackParam = require "common.structure.attack_param"
---@type World
local CW = World.CurWorld
local handles = T(Player, "PackageHandlers")

---@type SkillBuffConfig
local SkillBuffConfig = T(Config, "SkillBuffConfig")
--function handles:Xxxxx(packet)
--end

---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")
---@type GameCameraControl
local GameCameraControl = T(Lib, "GameCameraControl")

---@type GameSkillHelper
local GameSkillHelper = T(Lib, "GameSkillHelper")

--- 初始化角色数据
---@param packet any
function handles:S2CSyncRoleData(packet)
    local player = self
    local levelData = packet.levelData
    local inventoryData = packet.inventoryData
    local equippedData = packet.equippedData
    local abilityData = packet.abilityData
    local attributeData = packet.attributeData
    local purchaseData = packet.purchaseData
    --- 默认地图
    local bornMap = packet.bornMap

    --- 设置基础数据
    ---@type GrowthComponent
    local growthComponent = player:getComponent("growth")
    if growthComponent then
        growthComponent:deserialize(levelData)
    end
    --- 背包数据
    ---@type InventoryComponent
    local inventoryComponent = player:getComponent("inventory")
    if inventoryComponent then
        inventoryComponent:deserialize(inventoryData)
    end
    --- 装备中数据
    ---@type EquipmentComponent
    local equipmentComponent = player:getComponent("equipment")
    if equipmentComponent then
        equipmentComponent:deserialize(equippedData)
    end
    ---@type AbilityComponent
    local abilityComponent = player:getComponent("ability")
    if abilityComponent then
        abilityComponent:deserialize(abilityData)
    end
    ---@type AttributeComponent
    local attributeComponent = player:getComponent("attribute")
    if attributeComponent then
        attributeComponent:deserialize(attributeData)
    end
    ---@type BusinessComponent
    local businessComponent = player:getComponent("business")
    if businessComponent then
        businessComponent:deserialize(purchaseData)
    end

    --- 派发事件
    Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_SYNC_ROLE_DATA)
    --- 显示选择初始地图
    if not bornMap or bornMap == "" then
        local defaultBornMap = World.cfg.defaultBornMap
        if defaultBornMap and defaultBornMap ~= "" then
            return
        end
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UI_SHOW_SELECT_MAP)
    end
end

--- 攻击
---@param packet any
function handles:S2COnAttack(packet)
    -- local player = self
    local attacker = CW:getEntity(packet.attacker)
    local defender = CW:getEntity(packet.defender)
    ---@type AttackParam
    local param = AttackParam:new(packet)
    if defender and defender:isValid() then
        local damage = param.damage
        local crit = param.crit
        local dodge = param.dodge
        local dead = param.dead

        if damage ~= 0 then
            if crit then
                if defender.objID == Me.objID then
                    Plugins.CallTargetPluginFunc("fly_text", "onEntityShowFlyText", defender, Define.FlyTextType.PlayerSelfDamage, GameLib.formatUINumber(damage))
                else
                    Plugins.CallTargetPluginFunc("fly_text", "onEntityShowFlyText", defender, Define.FlyTextType.BlastDamage, "-" .. GameLib.formatUINumber(damage))
                end
            elseif defender.isPlayer then
                if defender.objID == Me.objID then
                    Plugins.CallTargetPluginFunc("fly_text", "onEntityShowFlyText", defender, Define.FlyTextType.PlayerSelfDamage, GameLib.formatUINumber(damage))
                else
                    Plugins.CallTargetPluginFunc("fly_text", "onEntityShowFlyText", defender, Define.FlyTextType.PlayerOtherDamage, GameLib.formatUINumber(damage))
                end
            else
                Plugins.CallTargetPluginFunc("fly_text", "onEntityShowFlyText", defender, Define.FlyTextType.Damage, GameLib.formatUINumber(damage))
            end
        end

        if packet.hurtAction and packet.hurtAction ~= "" then
            if not defender:canNotBreakAction() then
                defender:updateUpperAction(packet.hurtAction, -1)
            end
        end

        if param.skillId and param.skillId ~= 0 then
            local skillMoveCfg=SkillMovesConfig:getNewSkillConfig(param.skillId)
            --print("============================================ attack.",packet.skillId)
            if skillMoveCfg and skillMoveCfg.hitShakeCamera then
                local shake=false
                if attacker.objID == Me.objID then
                    shake=true
                else
                    shake=skillMoveCfg.hitShakeCamera.broadcastRange>0 and Lib.getPosDistanceSqr(Me:getPosition(),defender:getPosition())<=
                            skillMoveCfg.hitShakeCamera.broadcastRange*skillMoveCfg.hitShakeCamera.broadcastRange
                end
                --print("============ hitShakeCamera",packet.skillId,shake,Lib.getPosDistance(Me:getPosition(),defender:getPosition()))
                if shake then
                    GameCameraControl:tryShakeCamera(skillMoveCfg.hitShakeCamera)
                end
            end
    
            if skillMoveCfg and skillMoveCfg.hitTimeline and skillMoveCfg.hitTimeline ~= "" then
                defender:playColorAnimation(skillMoveCfg.hitTimeline)
            end

            if defender.objID == Me.objID  and skillMoveCfg and skillMoveCfg.defenderVariableTime and skillMoveCfg.defenderVariableTime>0 then
                defender:clientVibratorOnTime(skillMoveCfg.defenderVariableTime)
            end

            if defender.isPlayer  then
                GameSkillHelper:setEntityBlowAway(defender,attacker,param)
            end
        end

        if defender.objID == Me.objID then
            Lib.emitEvent(Event.EVENT_SHOW_HURT_UI_EFFECT)
        end

        --if dodge then
        --    defender:onDodge(attacker, param)
        --end

        --- 死亡时机
        if dead then
            defender:onDeadExtend(attacker, param,  packet.hitMoveTime)
        end
    end
end

--- 同步闪避时机
---@param packet any
function handles:SyncPlayerOnDodge(packet)
    local attacker = CW:getEntity(packet.attackerID)
    local defender = CW:getEntity(packet.defenderID)
    if defender and defender:isValid() then
        defender:onDodge(attacker)
    end
end

--- 同步属性加成
---@param packet any
function handles:S2CSyncAttributeBonus(packet)
    local player = self
    local bonus = packet.bonus
    if bonus then
        for _, data in pairs(bonus) do
            if data.add == 1 then
                AttributeSystem:addBonus(player, data.id, data.bonus, data.modType, data.source)
            else
                AttributeSystem:removeAllModifiersFromSource(player, data.source)
            end
        end
    end
end

--- 解锁加点方案
---@param packet any
function handles:S2CUnlockSetIndex(packet)
    ---@type Entity
    local player = self
    local unlockIndex = packet.idx
    local stateCode = packet.stateCode
    if stateCode == 0 then
        local preIndex = AttributeSystem:getIndex(player)
        AttributeSystem:setUnlockIndex(player, unlockIndex)
        AttributeSystem:setIndex(player, unlockIndex)
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_POINT_SET_UNLOCK, true, player, unlockIndex, preIndex)
    else
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_POINT_SET_UNLOCK, false)
    end
end

--- 加点
---@param packet any
function handles:S2CAddSetPoint(packet)
    ---@type Entity
    local player = self
    local index = packet.idx
    local id = packet.aid
    local stateCode = packet.stateCode
    local point = packet.point or 1
    if stateCode == 0 then
        local alevel = AttributeSystem:getLevelByIndex(player, id, index)
        alevel = alevel + point
        AttributeSystem:setLevelByIndex(player, id, alevel, index)
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ADD_POINT, true, player, index, id, alevel)
    else
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ADD_POINT, false)
    end
end

--- 切换属性方案
---@param packet any
function handles:S2CUpdatePointSetIndex(packet)
    ---@type Entity
    local player = self
    local index = packet.idx
    local stateCode = packet.stateCode
    if stateCode == 0 then
        local preIndex = AttributeSystem:getIndex(player)
        AttributeSystem:setIndex(player, index)
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_POINT_SET_INDEX, true, player, index, preIndex)
    else
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_POINT_SET_INDEX, false, player)
    end
end

--- 重置属性方案
---@param packet any
function handles:S2CResetPointSet(packet)
    ---@type Entity
    local player = self
    local index = packet.idx
    local stateCode = packet.stateCode
    if stateCode == 0 then
        AttributeSystem:setResetTimes(player, AttributeSystem:getResetTimes(player) + 1)
        AttributeSystem:clearAttributeData(player, index)
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_RESET_POINT_SET, true, player, index)
    else
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_RESET_POINT_SET, false)
    end
end

--- 同步背包
---@param packet any
function handles:S2CUpdateInventorySingle(packet)
    ---@type Entity
    local player = self
    local inventoryType = packet.inv_type
    local itemData = packet.item
    local amount = packet.amount
    local slotIndex = packet.slot_idx
    ---@type Item
    local item = InventorySystem:deserializeItem(itemData)

    InventorySystem:setItem(player, inventoryType, slotIndex, item, amount)

end

--- 切换能力
---@param packet any
function handles:S2CSwitchAbility(packet)
    ---@type Entity
    local player = self
    local aid = packet.aid
    local stateCode = packet.stateCode
    if stateCode == 0 then
        ---@type Ability
        local ability = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, aid)
        BattleManagerClient:instance():switchAbility(player, ability)

        -- if ability:getItemAlias() == Define.ITEM_ALIAS.DEFAULT_ABILITY then
        --     player:showGameTopTips(Lang:toText("g2069_ability_equipped_born"))
        -- else
        --     player:showGameTopTips(Lang:toText("g2069_ability_switch_success"))
        -- end

        Me:showGameTopTips(Lang:toText({ "g2069_use_ability_success", ability:getName() }))
    else
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY, false)
        player:showGameTopTips(Lang:toText("g2069_ability_switch_fail"))
    end
    
end

--- 更新等级数据
---@param packet any
function handles:S2CUpdateLevelData(packet)
    ---@type Entity
    local player = self

    local level = GrowthSystem:getLevel(player)
    local totalExp = GrowthSystem:getTotalExp(player)
    GrowthSystem:setLevelData(player, packet.level, packet.exp)

    local addLevel = GrowthSystem:getLevel(player) - level
    Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_EXP, player, addLevel, GrowthSystem:getTotalExp(player) - totalExp)
    if addLevel ~= 0 then
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_LEVEL, player, addLevel)
    end
end

--- 丢弃能力
---@param packet any
function handles:S2CDropAbility(packet)
    local player = self
    local aid = packet.aid
    local to = packet.to
    local stateCode = packet.stateCode

    if stateCode == 0 then
        ---@type Ability
        local ability = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, aid)
        --- 判断是否切换
        if to then
            ---@type Ability
            local toAbility = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, to)
            BattleManagerClient:instance():switchAbility(player, toAbility)
        end
        --- 处理数量
        InventorySystem:changeItemNumById(player, Define.INVENTORY_TYPE.ABILITY, aid, -1)
        
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_DROP_ABILITY, true, player, ability)

        local name = ItemConfig:getName(ability:getItemAlias())
        player:showGameTopTips(Lang:toText({ "g2069_ability_drop_success", name }))
    else
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_DROP_ABILITY, false)
        player:showGameTopTips(Lang:toText("g2069_ability_drop_fail"))
    end
end

--- 更新能力丢弃状态
---@param packet any
function handles:S2CGainDropAbility(packet)
    local player = self
    local aid = packet.aid
    local item = packet.item
    local slotIndex = packet.index
    if item then
        item = InventorySystem:deserializeItem(item)
        InventorySystem:setItem(player, Define.INVENTORY_TYPE.ABILITY, slotIndex, item, 1)
    else
        InventorySystem:changeItemNumById(player, Define.INVENTORY_TYPE.ABILITY, aid, 1)
    end
    ---@type Ability
    local ability = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, aid)
    if ability then
        local name = ItemConfig:getName(ability:getItemAlias())
        player:showGameTopTips(Lang:toText({ "g2069_ability_get_success", name }))
    end
end


--- 更新能力信息
---@param packet any
function handles:S2CUpdateAbilityLevelData(packet)
    local player = self
    local id = packet.id
    local exp = packet.exp
    local level = packet.level
    --- 设置能力
    local ability = AbilitySystem:getAbility(player)
    if ability and ability:getId() == id then
        local addLevel = level - ability:getLevel()
        local totalExp = ability:getTotalExp()
        AbilitySystem:setAbilityLevelData(player, level, exp)
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY_EXP, player, ability, addLevel, ability:getTotalExp() - totalExp)
        if addLevel ~= 0 then
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY_LEVEL, player, ability, addLevel)
        end
    else
        ability = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, id)
        if ability then
            ability:setLevel(level)
            ability:setExp(exp)
        end
    end
end

--- 同步奖励信息
---@param packet any
function handles:S2CSyncRewards(packet)
    ---@type Entity
    local player = self
    local prompt = packet.prompt
    local rewardType = packet.type
    local items = packet.items
    local exp = packet.exp
    local level = packet.level
    local aid = packet.aid
    local alevel = packet.alevel
    local aexp = packet.aexp
    --- 激活的永久能力
    local unlimited = nil
    if packet.unlimited then
        for _, id in pairs(packet.unlimited) do
            unlimited = unlimited or {}
            unlimited[id] = 1
        end
    end

    --- 限制物品
    local limit = packet.limit
    --- 替代显示数量
    local item_nums = packet.item_nums
    
    if items then
        for _, data in pairs(items) do
            local slotIndex = data.slotIndex
            local amount = data.amount
            ---@type Item
            local item = InventorySystem:deserializeItem(data.item)
            local type_alias = ItemConfig:getCfgByItemId(item:getItemId()).type_alias
            local inventoryType = Define.ITEM_INVENTORY_TYPE[type_alias]
            --- 设置物品
            InventorySystem:setItem(player, inventoryType, slotIndex, item, amount)
            
            if type_alias == Define.ITEM_TYPE.ABILITY and unlimited and unlimited[item:getId()] then
                --- 激活能力
                item = InventorySystem:getItemByIndex(player, inventoryType, slotIndex)
                Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY_UNLIMITED, player, item)
            end
        end
    end

    if exp then
        local plevel = GrowthSystem:getLevel(player)
        local totalExp = GrowthSystem:getTotalExp(player)
        GrowthSystem:setLevelData(player, level, exp)
        local addLevel = level - plevel
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_EXP, player, addLevel, GrowthSystem:getTotalExp(player) - totalExp)
        if addLevel ~= 0 then
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_LEVEL, player, addLevel)
        end
    end

    if aid then
        ---@type Ability
        local ability = InventorySystem:getItemById(player, Define.INVENTORY_TYPE.ABILITY, aid)
        if ability then
            local plevel = ability:getLevel()
            local totalExp = ability:getTotalExp()
            AbilitySystem:setAbilityLevelData(player, alevel, aexp)

            local addLevel = alevel - plevel
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY_EXP, player, ability, addLevel, ability:getTotalExp() - totalExp)
            if addLevel ~= 0 then
                Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY_LEVEL, player, ability, addLevel)
            end
        end
    end

    --- 提示信息
    if prompt == 1 then
        local rewards = nil
        if rewardType == Define.REWARD_TYPE.TASK then
            --- 任务奖励
            local taskId = packet.taskId
            local config = TaskConfig:getCfgById(taskId)
            rewards = config.rewards
        elseif rewardType == Define.REWARD_TYPE.KILL then
            local ratio = packet.ratio
            local monsterId = packet.monsterId
            --- 击杀经验
            local config = MonsterConfig:getCfgByMonsterId(monsterId)
            local rewardRexp = config.rewardRexp
            local rewardGold = config.rewardGold
            local rewardAexp = config.rewardAexp
            --- 击杀奖励
            local exp = math.ceil(rewardRexp * ratio)
            local gold = math.ceil(rewardGold * ratio)
            local aexp = math.ceil(rewardAexp * ratio)
            if gold > 0 then
                rewards = rewards or {}
                rewards[#rewards + 1] = { item_alias = Define.ITEM_ALIAS.GOLD_COIN, item_num = gold }
            end
            if exp > 0 then
                rewards = rewards or {}
                rewards[#rewards + 1] = { item_alias = Define.ITEM_ALIAS.ROLE_EXP, item_num = exp }
            end
            if aexp > 0 then
                rewards = rewards or {}
                rewards[#rewards + 1] = { item_alias = Define.ITEM_ALIAS.ABILITY_EXP, item_num = aexp }
            end

        elseif rewardType == Define.REWARD_TYPE.NPC then
            --- NPC对话
            local replyConfig = NpcDialogueReplyConfig:getCfgById(packet.replyId)
            rewards = replyConfig.rewards
        elseif rewardType == Define.REWARD_TYPE.TREASURE_BOX then
            rewards = packet.rewards
        elseif rewardType == Define.REWARD_TYPE.GOLDEN_WHEEL then
        elseif rewardType == Define.REWARD_TYPE.COMBINATION_GIFT then
        elseif rewardType == Define.REWARD_TYPE.SHOP_BUY then
        elseif rewardType == Define.REWARD_TYPE.DROP_ITEM then
            local alias = ItemConfig:getAliasByItemId(packet.itemId)

            --- 特殊提示
        elseif rewardType == Define.REWARD_TYPE.USE_ITEM then
            rewards = packet.rewards
        
		elseif rewardType == Define.REWARD_TYPE.BOOK then
            Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", "g2069_ui_reward_receive_success", Me)
        elseif rewardType == Define.REWARD_TYPE.MISSION_REWARD then
            local missionId = packet.missionId
            local config = MissionInfoConfig:getCfgByMissionId(missionId)
            rewards = config.rewards
            for _, item in pairs(rewards) do
                --- 弹出提示
                local itemConfig = ItemConfig:getCfgByItemAlias(item.item_alias)
                local name = itemConfig.name
                local qualityColor = Define.ITEM_QUALITY_FONT_COLOR[itemConfig.quality_alias]
                if qualityColor then
                    local color = string.format("[colour='%s']", qualityColor)
                    name = color .. Lang:toText(name)
                end
                local text = Lang:toText({ "g2069_gain_reward_tips", name })
                if item.item_num > 1 then
                    local color2 = string.format("[colour='%s']", World.cfg.fly_new_tipsSetting.textColours)
                    text = text  .. color2 .. "+" .. item.item_num
                end
                Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", text)
            end
        end

        if rewards then
            local exp = nil
            local gold = nil
            local aexp = nil
            if rewards then
                for _, data in pairs(rewards) do
                    local item_alias = data.item_alias
                    local item_num = data.item_num
    
                    --- 修改显示数量
                    if item_nums and item_nums[item_alias] then
                        item_num = item_nums[item_alias]
                    end

                    if item_alias == Define.ITEM_ALIAS.ROLE_EXP then
                        exp = (exp or 0) + item_num
                    elseif item_alias == Define.ITEM_ALIAS.GOLD_COIN then
                        gold = (gold or 0) + item_num
                    elseif item_alias == Define.ITEM_ALIAS.ABILITY_EXP then
                        aexp = (aexp or 0) + item_num
                    end
                end
            end
            
            --- 显示击杀奖励
            if exp or gold or aexp then
                player:showKillReward(exp, gold, aexp, limit)
            end
        end
    end
end

function handles:PushShowBossKillTips(packet)
    local config = MonsterConfig:getCfgByMonsterId(packet.monsterId)
    if config.monsterType == Define.MonsterType.BOSS then
        local content = Lang:toText({"g2069_kill_monster_boss", Lang:toText(config.monsterName)})
        Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", content)
    end
end

function handles:switchRunSound(packet)
    local entity=World.CurWorld:getEntity(packet.objID)
    if not entity or not entity:isValid() then
        return
    end
    --- @type SoundManager
    local SoundManager = T(Lib, "SoundManager")
    if packet.playRunSound then
        if not entity.playerRunSoundId then
            entity.playerRunSoundId=SoundManager:playSound("player_run",entity)
        end
        --print(">>>>>>>>>>>>>>>>>>>>>>>>>>> handles:switchRunSound",packet.playRunSound,entity.playerRunSoundId)
    else
        --print("----------------------------- handles:switchRunSound",packet.playRunSound,entity.playerRunSoundId)
        if entity.playerRunSoundId then
            SoundManager:stopSound(entity.playerRunSoundId)
            entity.playerRunSoundId=nil
        end
    end
end

--- 角色复活
function handles:S2CPlayerRevive(packet)
    Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_ROLE_REVIVE, self)
end

--- 皮肤数据处理
---@param packet any
function handles:S2CSyncGameSkin(packet)
    
end

--- 能力觉醒
---@param packet any
function handles:S2CAbilityAwake(packet)
    ---@type Entity
    local player = self
    local id = packet.id
    local awake = packet.awake
    local abilityId = packet.abilityId
    local stateCode = packet.stateCode
    if stateCode == 0 then
        local config = AbilityAwakeConfig:getCfgByAbilityId(abilityId)
        local item_nums = config.item_nums
        local item_costs = config.item_costs
        if item_costs[awake] then
            for _, item in pairs(item_costs[awake]) do
                local itemType = ItemConfig:getCfgByItemAlias(item.item_alias).type_alias
                local inventoryType = Define.ITEM_INVENTORY_TYPE[itemType]
                InventorySystem:changeItemNumByItemAlias(player, inventoryType, item.item_alias, -item.item_num)
            end
        end
        if item_nums[awake] and item_nums[awake] > 0 then
            InventorySystem:changeItemNumById(player, Define.INVENTORY_TYPE.ABILITY, id, -item_nums[awake])
        end
        --- 设置觉醒等级
        ---@type Ability
        local ability = AbilitySystem:setAbilityAwake(player, id, awake)
        if ability then
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY_AWAKE, true, player, ability)
            Me:showGameTopTips(Lang:toText({ "g2069_awakening_success", ability:getName(true), Define.ABILITY_AWAKE_LEVEL[awake] }))
            return
        end
    end
    --- 失败
    Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY_AWAKE, false)
    Me:showGameTopTips(Lang:toText("g2069_awakening_fail"))
end

--- 切换觉醒皮肤
---@param packet any
function handles:S2CSwitchAbilitySkin(packet)
    ---@type Entity
    local player = self
    local stateCode = packet.stateCode
    if stateCode == 0 then
        local awake = packet.awake
        local abilityId = packet.abilityId
        local ability = AbilitySystem:getAbility(player)
        AbilitySystem:setAbilitySkin(player, abilityId)
        if packet.unequip then
            Me:showGameTopTips(Lang:toText({ "g2069_awakening_appearance_unequip", ability:getName(true), awake }))
        else
            Me:showGameTopTips(Lang:toText({ "g2069_awakening_appearance_equip", ability:getName(true), awake }))
        end
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_SWITCH_ABILITY_SKIN, player, true)
        return
    end
    Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_SWITCH_ABILITY_SKIN, player, false)
end

--- 使用物品
---@param packet any
function handles:S2CUseItem(packet)
    ---@type Entity
    local player = self
    
    local stateCode = packet.stateCode
    if stateCode == 0 then
        local itemId = packet.itemId
        local id = packet.id
        local consume = packet.amount or 1
        local itemType = ItemConfig:getTypeByItemId(itemId)
        local inventoryType = Define.ITEM_INVENTORY_TYPE[itemType]
        local rewards = packet.rewards

        ---@type boolean, Item
        local success, item = InventorySystem:changeItemNumById(player, inventoryType, id, -consume)
        --- 切换能力
        if success then
            if itemType == Define.ITEM_TYPE.ABILITY then
                BattleManagerClient:instance():switchAbility(player, item)
                Me:showGameTopTips(Lang:toText({ "g2069_use_ability_success", item:getName() }))
            elseif itemType == Define.ITEM_TYPE.BUFF_CARD then
                local config = ItemConfig:getCfgByItemId(itemId)
                local subType = config.sub_type_alias
                local buffId = config.params["buff_id"]
                local buffConfig = SkillBuffConfig:getCfgByBuffId(buffId)

                if subType == "hp_regen_buff" then
                    local hp
                    if buffConfig.addHp then
                        hp = tostring(buffConfig.addHp)
                    else
                        hp = tostring(buffConfig.addHpPct * 100) .. "%"
                    end
                    Me:showGameTopTips(Lang:toText({ "g2069_hp_buff_regen", hp }))
                elseif subType == "mp_regen_buff" then
                    local mp
                    if buffConfig.addMp then
                        mp = tostring(buffConfig.addMp)
                    else
                        mp = tostring(buffConfig.addMpPct * 100) .. "%"
                    end
                    Me:showGameTopTips(Lang:toText({ "g2069_mp_buff_regen", mp }))
                else
                    Me:showGameTopTips(Lang:toText({ "g2069_get_buff", buffConfig.name }))
                end
            elseif itemType == Define.ITEM_TYPE.GIFT_PACK then
                if rewards then
                    for _, data in pairs(rewards) do
                        local itemCfg = ItemConfig:getCfgByItemAlias(data.item_alias)
                        local name = itemCfg.name
                        if Define.ITEM_QUALITY_FONT_COLOR[itemCfg.quality_alias] then
                            local color = string.format("[colour='%s']", Define.ITEM_QUALITY_FONT_COLOR[itemCfg.quality_alias])
                            name = "▢" .. color .. Lang:toText(name)
                        end
                        local text = Lang:toText({ "g2069_gain_reward_tips", name })
                        if tonumber(data.item_num) > 1 then
                            local color2 = string.format("[colour='%s']", World.cfg.fly_new_tipsSetting.textColours)
                            text = text .. color2 .. "+" .. tostring(data.item_num)
                        end
                        Me:showGameTopTips(text)
                    end
                end
            else
                Me:showGameTopTips(Lang:toText("g2069_use_item_success"))
            end
            Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_USE_ITEM, true, player, item, consume, rewards)
            return
        end
        Lib.logError("Error:Change item number fail!")
    end

    Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_USE_ITEM, false)
    Me:showGameTopTips(Lang:toText("g2069_use_item_fail"))
end

--- 丢弃物品
---@param packet any
function handles:S2CDropItem(packet)
    ---@type Entity
    local player = self
    local stateCode = packet.stateCode

    if stateCode == 0 then
        local itemId = packet.itemId
        local id = packet.id
        local amount = packet.amount or 1
        local itemType = ItemConfig:getTypeByItemId(itemId)
        local inventoryType = Define.ITEM_INVENTORY_TYPE[itemType]
        ---@type boolean, Item
        local success, item = InventorySystem:changeItemNumById(player, inventoryType, id, -amount)

        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_DROP_ITEM, true, player, item, amount)
    else
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_DROP_ITEM, false)
    end
end

--- 广播危险人物
---@param packet any
function handles:SyncClientDangerEnter(packet)
    if packet.dangerValue >= World.cfg.game_role_commonSetting.dangerBoardVal2 then
        local content = Lang:toText({"g2069_danger_max_enter_tips", packet.name})
        Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", content)
    elseif packet.dangerValue >= World.cfg.game_role_commonSetting.dangerBoardVal1 then
        local content = Lang:toText({"g2069_danger_enter_tips", packet.name})
        Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", content)
    end
end


------------------- begin engine buff 处理 ------------------

function handles:AddBuff(packet)
    ---@type Entity
    local entity = World.CurWorld:getEntity(packet.objID)
    if not entity or not entity:isValid() then
        return
    end
    local from = World.CurWorld:getEntity(packet.fromID)
    entity:addClientBuff(packet.name, packet.id, packet.time, from)

    if entity.objID == Me.objID then
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UI_ADD_BUFF, packet.id)
    end
end

function handles:RemoveBuff(packet)
    ---@type Entity
    local entity = World.CurWorld:getEntity(packet.objID)
    if not entity or not entity:isValid() then
        return
    end
    local buff = entity:data("buff")[packet.id]
    if not buff then return end
    
    if entity.objID == Me.objID then
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UI_REMOVE_BUFF, packet.id)
    end
	entity:removeClientBuff(buff)
end

function handles:ChangeBuffTime(packet)
    ---@type Entity
    local entity = World.CurWorld:getEntity(packet.objID)
    if not entity or not entity:isValid() then
        return
    end
    local buff = entity:data("buff")[packet.id]
	entity:changeClientBuffTime(buff, packet.restTime)
    if entity.objID == Me.objID then
        Lib.emitEvent(Event.EVENT_GAME_ROLE_COMMON_UI_UPDATE_BUFF, packet.id)
    end
end

------------------- end engine buff 处理 ------------------
