---
--- Generated by PluginCreator
--- game_role_common entity_common
--- DateTime:2023-03-03
---

---@type MonsterConfig
local MonsterConfig = T(Config, "MonsterConfig")

local ValueDef = T(Entity, "ValueDef")
-- key				            = {isCpp,	client,	toSelf,	toOther,	init,	               saveDB}
--ValueDef.xxx 					= {false,   false,  true,   false,      0,                      true}
ValueDef.levelData              = {false,   false,  false,   false,     {},                     true}  --- 等级数据
ValueDef.attributeData          = {false,   false,  false,   false,     {},                     true}  --- 属性加点方案
ValueDef.inventoryData          = {false,   false,  false,   false,     {},                     true}  --- 背包系统
ValueDef.abilityData            = {false,   false,  false,   false,     {},                     true}  --- 能力数据
ValueDef.equippedData           = {false,   false,  false,   false,     {},                     true}  --- 装备中数据
ValueDef.curHp                  = {false,   false,  true,    true,       0,                      false} --- 当前血量
ValueDef.curMp                  = {false,   false,  true,    false,      0,                      false} --- 当前精力
ValueDef.curLv                  = {false,   false,  false,   true,       1,                      false} --- 当前等级
ValueDef.bornMap                = {false,   false,  true,   false,       nil,                  true} --- 默认地图
ValueDef.curMap                 = {false,   false,  false,   false,       nil,                  true} --- 当前地图
ValueDef.regTime                = {false,   false,  true,   false,       0,                  true} --- 注册时间
ValueDef.lastLoginTime          = {false,   false,  true,   false,       0,                  true} --- 最后登录时间
ValueDef.lastLogoutTime         = {false,   false,  true,   false,       0,                  true} --- 最后登出时间
ValueDef.totalPlayTime          = {false,   false,  true,   false,       0,                  true} --- 总游玩时间
ValueDef.activeDayData             = {false,   false,  true,   false,       {},                  true} --- 活跃登录时间
ValueDef.dailyCoin              = {false,   false,  false,   false,       {},                  true} --- 日常金币数据
ValueDef.dailyExp               = {false,   false,  false,   false,       {},                  true} --- 日常经验数据
ValueDef.dangerValue               = {false,   false,  true,   true,       0,                  true} --- 危险指数数据
ValueDef.isResetDanger               = {false,   false,  true,   false,       false,                  true} --- 是否重置过危险数
ValueDef.isResetSecondDanger               = {false,   false,  true,   false,       0,                  true} --- 是否第二次重置过危险数
ValueDef.day_killed_other                  = {false,   false,  true,    true,    {},                      true} --- 当天被玩家击杀记录
ValueDef.roleLastLoginTime    = {false,   false,  true,   false,      0,                       true}    ---上次登陆时间
ValueDef.purchaseData         = {false,   false,  false,   false,      {},                       true}    ---商店购买数据
ValueDef.resetPosTime         = {false,   true,  false,   false,      0,                       true}    --- 重置位置时间
ValueDef.dataVersionInfo		= {false,   false,  true,   false,      0,                      true}  -- 清数据版本
ValueDef.originSkins            = {false,   false,  true,   true,      {},                      false}  -- 初始皮肤


ValueDef.count_kill_boss                  = {false,   false,  true,    false,      0,                      false} --- 本局击杀boss次数
ValueDef.count_kill_monster                  = {false,   false,  true,    false,      0,                      false} --- 本局击杀怪物次数
ValueDef.count_killed_monster                  = {false,   false,  true,    false,      0,                      false} --- 本局被怪物击杀次数
ValueDef.count_kill_other                  = {false,   false,  true,    false,      0,                      false} --- 本局击杀玩家次数
ValueDef.count_killed_other                  = {false,   false,  true,    false,      0,                      false} --- 本局被玩家击杀次数

ValueDef.missionCountInfo                  = {false,   false,  true,    false,     {},                      true} --- 当天可进入副本组次数

--- @type Entity
local Entity = Entity

function Entity:getMissionCountInfo()
    return self:getValue("missionCountInfo")
end

function Entity:setMissionCountInfo(data)
    self:setValue("missionCountInfo", data)
end

function Entity:resetMissionCountInfo()
    local data = {}
    for _, val in pairs(World.cfg.game_missionSetting.missionCounts) do
        data[val.missionGroup] = val.missionNum
    end
    self:setMissionCountInfo(data)
end

function Entity:initMissionCountInfo()
    local missionCountInfo = self:getMissionCountInfo()
    for _, val in pairs(World.cfg.game_missionSetting.missionCounts) do
        if not missionCountInfo[val.missionGroup] then
            missionCountInfo[val.missionGroup] = val.missionNum
        end
    end
    self:setMissionCountInfo(missionCountInfo)
end

function Entity:getDataVersionInfo()
    return self:getValue("dataVersionInfo")
end

function Entity:setDataVersionInfo(data)
    self:setValue("dataVersionInfo", data)
end


function Entity:setRoleLastLoginTime(value)
    self:setValue("roleLastLoginTime", value)
end

function Entity:getRoleLastLoginTime()
    return self:getValue("roleLastLoginTime")
end

function Entity:setDayKilledOther(value)
    self:setValue("day_killed_other", value)
end

function Entity:getDayKilledOther()
    return self:getValue("day_killed_other")
end

function Entity:setDangerValue(value, isForce)
    if isForce then
        self:setValue("dangerValue", value)
        return
    end
    local max=World.cfg.game_role_commonSetting.dangerChangeMax or 10000
    local curValue=self:getDangerValue()
    if value<0 then
        print("++++++++++++++++++++++ SCRIPT_EXCEPTION setDangerValue ne ",self.platformUserId,curValue,value,debug.traceback())
        return
    end
    if value-curValue>max then
        print("++++++++++++++++++++++ SCRIPT_EXCEPTION setDangerValue ",self.platformUserId,curValue,value,debug.traceback())
        value=curValue+max
    end
    self:setValue("dangerValue", value)
end

function Entity:getDangerValue()
    return self:getValue("dangerValue") or 0
end

function Entity:setIsResetDanger(value)
    self:setValue("isResetDanger", value)
end

function Entity:getIsResetDanger()
    return self:getValue("isResetDanger") or false
end

function Entity:setIsResetSecondDanger(value)
    self:setValue("isResetSecondDanger", value)
end

function Entity:getIsResetSecondDanger()
    return self:getValue("isResetSecondDanger") or 0
end

function Entity:setCountKilledOther(value)
    self:setValue("count_killed_other", value)
end

function Entity:getCountKilledOther()
    return self:getValue("count_killed_other")
end

function Entity:setCountKillOther(value)
    self:setValue("count_kill_other", value)
end

function Entity:getCountKillOther()
    return self:getValue("count_kill_other")
end

function Entity:setCountKilledMonster(value)
    self:setValue("count_killed_monster", value)
end

function Entity:getCountKilledMonster()
    return self:getValue("count_killed_monster")
end

function Entity:setCountKillMonster(value)
    self:setValue("count_kill_monster", value)
end

function Entity:getCountKillMonster()
    return self:getValue("count_kill_monster")
end

function Entity:setCountKillBoss(value)
    self:setValue("count_kill_boss", value)
end

function Entity:getCountKillBoss()
    return self:getValue("count_kill_boss")
end

function Entity:setLevelData(value)
    self:setValue("levelData", value)
end

function Entity:getLevelData()
    return self:getValue("levelData") or {}
end

function Entity:setAbilityData(value)
    self:setValue("abilityData", value)
end

function Entity:getAbilityData()
    return self:getValue("abilityData") or {}
end

function Entity:setCurHp(value)
    self:setValue("curHp", value)
end

function Entity:getCurHp()
    return self:getValue("curHp")
end

function Entity:setCurMp(value)
    self:setValue("curMp", value)
end

function Entity:getCurMp()
    return self:getValue("curMp")
end

function Entity:setCurLevel(value)
    self:setValue("curLv", value)
end

function Entity:getCurLevel()
    return self:getValue("curLv")
end

function Entity:setAttributeData(value)
    self:setValue("attributeData", value)
end

function Entity:getAttributeData()
    return self:getValue("attributeData") or {}
end

function Entity:setInventoryData(value)
    self:setValue("inventoryData", value)
end

function Entity:getInventoryData()
    return self:getValue("inventoryData") or {}
end

function Entity:setEquippedData(value)
    self:setValue("equippedData", value)
end

function Entity:getEquippedData()
    return self:getValue("equippedData") or {}
end

function Entity:setBornMap(value)
    self:setValue("bornMap", value)
end

function Entity:getBornMap()
    return self:getValue("bornMap")
end

function Entity:setCurMap(value)
    self:setValue("curMap", value)
end

function Entity:getCurMap()
    return self:getValue("curMap")
end

function Entity:setRegisterTime(value)
    local regTime = self:getRegisterTime()
    if not regTime or regTime == 0 then
        self:setValue("regTime", value)
    end
end

function Entity:getRegisterTime()
    return self:getValue("regTime") or 0
end

function Entity:setLastLoginTime(value)
    self:setValue("lastLoginTime", value)
end

function Entity:getLastLoginTime()
    return self:getValue("lastLoginTime") or 0
end

function Entity:setLastLogoutTime(value)
    self:setValue("lastLogoutTime", value)
end

function Entity:getLastLogoutTime()
    return self:getValue("lastLogoutTime") or 0
end

function Entity:getTotalPlayTime()
    return self:getValue("totalPlayTime") or 0
end

function Entity:addTotalPlayTime(value)
    local totalPlayTime = self:getTotalPlayTime()
    totalPlayTime = totalPlayTime + value
    self:setValue("totalPlayTime", totalPlayTime)
end

function Entity:addActiveDay(curTime)
    local data = self:getActiveDayData()
    local save = nil
    if not data or not data.time then
        data = data or {}
        data.day = 1
        data.time = curTime
        save = true
    elseif not Lib.isSameDay(data.time, curTime) then
        data.day = data.day + 1
        data.time = curTime
        save = true
    end
    if save then
        self:setActiveDayData(data)
    end
end

function Entity:setActiveDayData(value)
    self:setValue("activeDayData", value)
end

function Entity:getActiveDayData()
    return self:getValue("activeDayData") or {}
end

--- 添加日常获得经验
---@param addExp any
function Entity:addDailyExp(addExp)
    local data = self:getValue("dailyExp") or {}
    local curTime = os.time()
    if not data.time or not Lib.isSameDay(data.time, curTime) then
        data.time = curTime
        data.num = addExp
    else
        data.num = data.num + addExp
    end
    self:setValue("dailyExp", data)
end

--- 获取日常获得经验
function Entity:getDailyExp()
    local data = self:getValue("dailyExp") or {}
    if data.time and Lib.isSameDay(data.time, os.time()) then
        return data.num or 0
    end
    return 0
end

--- 添加日常获得金币
---@param addCoin any
function Entity:addDailyCoin(addCoin)
    local data = self:getValue("dailyCoin") or {}
    local curTime = os.time()
    if not data.time or not Lib.isSameDay(data.time, curTime) then
        data.time = curTime
        data.num = addCoin
    else
        data.num = data.num + addCoin
    end
    self:setValue("dailyCoin", data)
end

--- 获取日常获得金币
function Entity:getDailyCoin()
    local data = self:getValue("dailyCoin") or {}
    if data.time and Lib.isSameDay(data.time, os.time()) then
        return data.num or 0
    end
    return 0
end

function Entity:setDailyCoin(value)
    self:setValue("dailyCoin", value)
end

function Entity:setDailyExp(value)
    self:setValue("dailyExp", value)
end

function Entity:setPurchaseData(value)
    self:setValue("purchaseData", value)
end

function Entity:getPurchaseData()
    return self:getValue("purchaseData") or {}
end

function Entity:getResetPosTime()
    return self:getValue("resetPosTime") or 0
end

function Entity:setResetPosTime(value)
    self:setValue("resetPosTime", value)
end

function Entity:setOriginSkins(value)
    self:setValue("originSkins", value)
end

function Entity:getOriginSkins()
    return self:getValue("originSkins")
end

------------------ 公共逻辑部分 ---------------------
--- 判断是否存在组件
---@param name any
---@return boolean
function Entity:checkComponent(name)
    if not self._components then
        return false
    end
    return self._components[name] ~= nil
end

--- 添加组件
---@param name any
---@param component any
function Entity:addComponent(name, component)
    if not self._components then
        self._components = {}
    end
    self._components[name] = component
    return component
end

--- 移除组件
---@param name any
function Entity:removeComponent(name)
    if not self._components then
        return
    end
    self._components[name] = nil
end

--- 获取组件
---@param name any
function Entity:getComponent(name)
    if not self._components then
        return nil
    end
    return self._components[name]
end

--- 判断是否怪物
---@return boolean 是否怪物
function Entity:isMonster()
    local monsterId = self:getMonsterId()
    if monsterId and monsterId > 0 then
        return true
    end
    return false
end

--- 判断是否BOSS
---@return boolean 是否BOSS
function Entity:isBossMonster()
    local monsterId = self:getMonsterId()
    if monsterId and monsterId > 0 then
        local monsterCfg = MonsterConfig:getCfgByMonsterId(monsterId)
        return monsterCfg.monsterType == Define.MonsterType.BOSS
    end
    return false
end

--- 获取怪物id
---@return number monsterId
function Entity:getMonsterId()
    if not self.monsterId then
        self.monsterId = self:cfg().monsterId or 0
    end
    return self.monsterId
end

--- 获取怪物别称
---@return string monster_alias
function Entity:getMonsterAlias()
    local monsterId = self:getMonsterId()
    if monsterId and monsterId > 0 then
        local monsterCfg = MonsterConfig:getCfgByMonsterId(monsterId)
        return monsterCfg.monster_alias
    end
    return monsterId
end

--- 获取怪物等级
---@return number
function Entity:getMonsterLevel()
    local monsterId = self:getMonsterId()
    if monsterId and monsterId > 0 then
        local monsterCfg = MonsterConfig:getCfgByMonsterId(monsterId)
        return monsterCfg.monsterLevel
    end
    return 0
end

--- 设置无敌
---@param invincible boolean 
function Entity:setInvincible(invincible)
    self.invincible = invincible
end

--- 获取无敌状态
---@return boolean
function Entity:isInvincible()
    return self.invincible or false
end

--- 攻击前时机
---@param defender Entity 被击者
---@param data AttackParam 伤害公式数据
function Entity:onAttackBefore(defender, data)
    
end

--- 被击前时机
---@param attacker Entity 攻击者
---@param data AttackParam 伤害公式数据
function Entity:onDefendBefore(attacker, data)
    
end

--- 攻击时机
---@param defender Entity 被击者
---@param data AttackParam 伤害公式数据
function Entity:onAttack(defender, data)
    
end

--- 被击时机
---@param attacker Entity 攻击者
---@param data AttackParam 伤害公式数据
function Entity:onDefend(attacker, data)
    
end

--- 闪避时机
---@param attacker Entity 攻击者
---@param data AttackParam 伤害公式数据
function Entity:onDodge(attacker, data)
    
end

--- 死亡时机，血量扣为0瞬间就触发
---@param attacker Entity 攻击者
---@param data AttackParam 伤害公式数据
function Entity:onDeadExtend(attacker, data)

end

--- 消亡时机
function Entity:onDestroyExtend()
    
end