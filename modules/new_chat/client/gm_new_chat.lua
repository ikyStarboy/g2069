---
--- Generated by PluginCreator
--- new_chat gm
--- DateTime:2022-01-06
---

local path = Root.Instance():getGamePath():gsub("\\", "/") .. "lua/gm_client.lua"
local file, err = io.open(path, "r")
local GMItem
if file then
    GMItem = require("gm_client")
    file:close()
end
if not GMItem then
    GMItem = GM:createGMItem()
end
--GMItem["new_chat/一个彩蛋"] = function()
--end

GMItem["聊天插件/发送世界聊天"] = GM:inputStr(function(self, val)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:sendChatMsg(Define.ChatPage.World, {
        fromId = Me.platformUserId,
        msg = val,
        msgType = Define.MsgType.Text
    })
end)

GMItem["聊天插件/发送私聊"] = GM:inputNumber(function(self, val)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:sendChatMsg(Define.ChatPage.Private, {
        fromId = Me.platformUserId,
        msg = "私聊信息",
        msgType = Define.MsgType.Text,
        targetUserId = val
    })
end)

GMItem["聊天插件/发送20条世界消息"] = function(self, val)
    local ChatHelper = T(Lib, "ChatHelper")
    for i = 1, 9999 do
        ChatHelper:sendChatMsg(Define.ChatPage.World, {
            fromId = Me.platformUserId,
            msg = i,
            msgType = Define.MsgType.Text
        })
    end
end

local contentText = {
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
    "ubur ubur ikan lele pinjem seratus le",
}
local sendIndex = 0
GMItem["聊天插件/10帧一条世界消息"] = function(self, val)
    if self.gmAutoSendMsgTimer then
        self.gmAutoSendMsgTimer()
        self.gmAutoSendMsgTimer = nil
        sendIndex = 0
        return
    end
    self.gmAutoSendMsgTimer = World.Timer(1, function()
        local ChatHelper = T(Lib, "ChatHelper")
        sendIndex = sendIndex + 1
        ChatHelper:sendChatMsg(Define.ChatPage.World, {
            fromId = Me.platformUserId,
            msg = contentText[math.random(1, #contentText)],
            msgType = Define.MsgType.Text
        })
        return true
    end)
end

GMItem["聊天插件/发送表情"] = function(self)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:sendChatMsg(Define.ChatPage.World, {
        fromId = Me.platformUserId,
        msg = 1,
        msgType = Define.MsgType.Emoji,
    })
end

GMItem["聊天插件/发送快捷语"] = function(self)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:sendChatMsg(Define.ChatPage.World, {
        fromId = Me.platformUserId,
        msg = 1,
        msgType = Define.MsgType.ShortMsg,
    })
end

local event
GMItem["聊天插件/发送语音"] = function(self)
    if not event then
        event = Lib.lightSubscribeEvent("", Event.EVENT_CHAT_SEND_VOICE, function(time, url)
            local ChatHelper = T(Lib, "ChatHelper")
            ChatHelper:sendChatMsg(Define.ChatPage.World, {
                fromId = Me.platformUserId,
                msg = {
                    uri = url,
                    voiceTime = time
                },
                msgType = Define.MsgType.Voice,
            })
        end)
    end
    VoiceManager:startRecord()
    World.Timer(40, function()
        VoiceManager:stopRecord()
    end)
end

GMItem["聊天插件/私聊表情"] = GM:inputNumber(function(self, val)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:sendChatMsg(Define.ChatPage.Private, {
        fromId = Me.platformUserId,
        msg = 1,
        msgType = Define.MsgType.Emoji,
        targetUserId = val
    })
end)

GMItem["聊天插件/私聊快捷语"] = GM:inputNumber(function(self, val)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:sendChatMsg(Define.ChatPage.Private, {
        fromId = Me.platformUserId,
        msg = 1,
        msgType = Define.MsgType.ShortMsg,
        targetUserId = val
    })
end)

GMItem["聊天插件/私聊语音"] = GM:inputNumber(function(self, val)
    if not event then
        event = Lib.lightSubscribeEvent("", Event.EVENT_CHAT_SEND_VOICE, function(time, url)
            local ChatHelper = T(Lib, "ChatHelper")
            ChatHelper:sendChatMsg(Define.ChatPage.Private, {
                fromId = Me.platformUserId,
                msg = {
                    uri = url,
                    voiceTime = time
                },
                msgType = Define.MsgType.Voice,
                targetUserId = val
            })
        end)
    end
    VoiceManager:startRecord(val)
    World.Timer(40, function()
        VoiceManager:stopRecord(val)
    end)
end)

GMItem["聊天插件/获取私聊历史消息"] = GM:inputNumber(function(self, val)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:checkHistoryIsLoad(val)
end)

GMItem["聊天插件/广播消息"] = function(self)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:sendCrossServerMsg({
        fromId = Me.platformUserId,
        msg = 1,
        msgType = Define.MsgType.Text
    })
end

GMItem["聊天插件/切换聊天频道"] = GM:inputStr(function(self, val)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:joinChatChannel(val)
end)

GMItem["聊天插件/发送系统消息"] = GM:inputStr(function(self, val)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper:sendChatMsg(Define.ChatPage.System, {
        msg = val,
        msgType = Define.MsgType.Text
    })
end)

GMItem["聊天插件/解除发消息限制"] = function(self)
    local ChatHelper = T(Lib, "ChatHelper")
    ChatHelper.cheatNoSendLimit=true
end

GMItem["业务工具/月卡清零"] = function(self)
    Me:sendPacket({ pid = 'clearMoonCardTest'})
end