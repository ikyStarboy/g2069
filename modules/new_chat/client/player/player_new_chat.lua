---
--- Generated by PluginCreator
--- new_chat player
--- DateTime:2022-01-06
---
local Player = Player
local ChatPage = Define.ChatPage
local ChatHelper = T(Lib, "ChatHelper")

function Player:showChatBubble(msgData)
    if msgData.pageType ~= ChatPage.World then
        return
    end
    local chatBubbleSetting = World.cfg.chatSetting.chatBubbleSetting
    local entity = World.CurWorld:getEntity(msgData.objID)
    if entity and entity:isValid() then
        local args = {
            position = Vector3.new(0, chatBubbleSetting.offsetY, 0),
            width = chatBubbleSetting.bubbleWinSize.width,
            height = chatBubbleSetting.bubbleWinSize.height,
            objID = entity.objID,
            flags = 4
        }
        local sceneWindow, headBubbleInstance
        headBubbleInstance = entity.headBubbleInstance
        if not headBubbleInstance then
            sceneWindow, headBubbleInstance = UI:openSceneWindow("UI/new_chat/gui/win_head_bubble",
                    "win_head_bubble"..entity.objID, args,
                    "asset",
                    entity.objID)
            entity.headBubbleInstance = headBubbleInstance
        end
        headBubbleInstance:insertMsg(msgData)
    end
end

function Player:getVoiceCardTime()
    self:sendPacket({pid = "GetVoiceCardTime"},function (time)
        Lib.emitEvent(Event.EVENT_CHAT_CARD_TIME, time)
    end)
end

---获取用于UI显示的语音次数
function Player:getSoundTimesString()
    if self:getSoundMoonCardEnable() then
        return '*'
    else
        if self:getSoundTimes() > 0 then
            return tostring(Me:getSoundTimes())
        else
            if self:getFreeSoundTimes() > 0 then
                return tostring(Me:getFreeSoundTimes())
            else
                return ""
            end
        end
    end
end

--- 退出帮会时清除帮会聊天信息
World.Timer(1,function ()
    Lib.subscribeEvent(Event.EVENT_EXIT_GANG,function ()
        ChatHelper:clearMsgList(ChatPage.Gang)
    end)
end)

-- 客户端发送聊天的埋点
function Player:sendMsgReport(pageType,msgType)
    local data = {}
    if msgType == Define.MsgType.Voice then
        data.info_type = 2
    elseif msgType == Define.MsgType.Emoji then  -- 表情
        data.info_type = 3
    else -- 纯文字
        data.info_type = 1
    end
    if pageType == ChatPage.World then
        data.chat_type = 0
    elseif pageType == ChatPage.Private then
        data.chat_type = 1
    end
    Plugins.CallTargetPluginFunc("report", "report", "chat_info", data)
end

-- 客户端好友请求相关埋点
function Player:friendRequestReport(operationType,friendId,isSender)
    --print(">>>>>>>>>>>>>>> Player:friendRequestReport ",operationType,friendId,isSender)
    local opTypeTrans={}
    if isSender then
        opTypeTrans[FriendManager.operationType.ADD_FRIEND] = Define.AddFriendStatus.SendInvite
        opTypeTrans[FriendManager.operationType.AGREE] = Define.AddFriendStatus.AgreeInvite
        opTypeTrans[FriendManager.operationType.REFUSE] = Define.AddFriendStatus.RefuseInvite
    else
        opTypeTrans[FriendManager.operationType.ADD_FRIEND] = Define.AddFriendStatus.ReceiveInvite
        opTypeTrans[FriendManager.operationType.AGREE] = Define.AddFriendStatus.InviteSuccess
        opTypeTrans[FriendManager.operationType.REFUSE] = Define.AddFriendStatus.InviteFail
    end
    local reportOpType=opTypeTrans[operationType]
    if not reportOpType or not friendId then
        return
    end
    local reportData={}
    reportData.status= reportOpType
    reportData.friend_id= friendId
    Plugins.CallTargetPluginFunc("report", "report", "add_friend", reportData)
end

