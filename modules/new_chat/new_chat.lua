---
--- Generated by PluginCreator
--- new_chat mainLua
--- DateTime:2022-01-06
---
require "common.entity_new_chat"
require "common.event_new_chat"
require "common.define_new_chat"
require "common.chat_msg_manager"
require "common.chat_helper"
require "common.config.short_config"
require "common.config.emoji_config"
require "common.config.voice_shop_config"
if World.isClient then
    require "client.chat_ui_helper"
    require "client.player.player_new_chat"
    require "client.player.player_new_chat_friend"
    require "client.player.packet_new_chat"
    require "client.player.player_event_chat"
    require "client.entity.entity_new_chat"
    require "client.entity.entity_value_func_new_chat"
    require "client.gm_new_chat"
    require "client.connector.chat_connector_handler"
    require "client.connector.chat_connector_sender"
    require "client.async_process_friend"

    Lib.subscribeEvent(Event.EVENT_ENTITY_REMOVED, function(objID)
        local entity = World.CurWorld:getEntity(objID)
        if entity and entity:isValid() then
            if entity.headBubbleInstance then
                entity.headBubbleInstance:onClose()
                entity.headBubbleInstance = nil
                UI:closeSceneWindow("win_head_bubble" .. entity.objID)
            end
        end
    end)
else

    require "server.player.player_new_chat"
    require "server.player.player_new_chat_friend"
    require "server.player.packet_new_chat"
    require "server.entity.entity_new_chat"
    require "server.gm_new_chat"
    require "server.async_process_friend"

    --Plugins.CallTargetPluginFunc("connector", "start")
end

local operationType = FriendManager.operationType
-- 其他玩家对我进行好友操作的回调，只有对方操作的时候，我刚好在线才会触发
Lib.subscribeEvent(Event.EVENT_FRIEND_OPERATION_NOTICE, function(opType, playerPlatformId)
    print("===================== Event.EVENT_FRIEND_OPERATION_NOTICE ",opType,playerPlatformId)
    if opType == operationType.AGREE then -- 添加请求被同意
        Me:doRequestServerFriendInfo(Define.chatFriendType.game)
        Me:doRequestServerFriendInfo(Define.chatFriendType.platform)
        Me:addPlayerFriendFromExist(playerPlatformId, Define.friendStatus.gameFriend)
    elseif opType == operationType.DELETE then-- 被删除好友
        Me:doRequestServerFriendInfo(Define.chatFriendType.game)
        Me:doRequestServerFriendInfo(Define.chatFriendType.platform)
        Me:removePlayerFriendFromExist(playerPlatformId)
    elseif opType == operationType.ADD_FRIEND then -- 有添加好友请求
        AsyncProcess.LoadUserRequests()
    end
    Me:friendRequestReport(opType,playerPlatformId,false)
end)
---@type ChatHelper
local ChatHelper = T(Lib, "ChatHelper")
local ChatMsgManager = T(World, "ChatMsgManager")
ChatMsgManager:init()
ChatHelper:init()


local handlers = {}
function handlers.onGameReady()
    CGame.instance:getShellInterface():onGetTalkList(0, World.cfg.chatSetting.maxHistory or 10)
    World.Timer(1,function ()
        Me:doRequestServerFriendInfo(Define.chatFriendType.game,0)
        Me:doRequestServerFriendInfo(Define.chatFriendType.platform,0)
        --UI:openWindow("UI/new_chat/gui/win_chat_mini")
        --Lib.emitEvent(Event.EVENT_UI_OPEN_CHAT_MINI)
    end)
end

function handlers.OnPlayerLogin(player)
    -- 服务端登陆
    player:loginRequestFriendInfo()
    player:updateFreeSoundFlag()
    player:checkVoiceMoonEnable()
end

--- 发送消息
function handlers.doRequestServerSendChatMsg(pageType, msgData)
    if World.isClient then
        ChatHelper:sendChatMsg(pageType, msgData)
    end
end

return function(name, ...)
    if type(handlers[name]) ~= "function" then
        return
    end
    return handlers[name](...)
end