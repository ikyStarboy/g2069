---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/3/13 11:10
---

---@class RoleStateHelper
local RoleStateHelper = T(Lib, "RoleStateHelper")

local RoleStateBase = require "common.state.base_state"
---@type RoleBattlePreState
local RoleBattlePreState = require "common.state.battle_pre_state"
---@type RoleBattleState
local RoleBattleState = require "common.state.battle_state"
---@type RoleBattleDeadState
local RoleBattleDeadState = require "common.state.battle_dead_state"
---@type RoleBlowAwayState
local RoleBlowAwayState = require "common.state.blow_away_state"
---@type InTeleportState
local InTeleportState = require "common.state.in_teleport_state"
---@type SkillActionState
local SkillActionState = require "common.state.skill_action_state"
---@type RoleStateVertigo
local RoleStateVertigo = require "common.state.battle_vertigo_state"
---@type RoleStateFreeze
local RoleStateFreeze = require "common.state.battle_freeze_state"
---@type SkillChargeState
local SkillChargeState = require "common.state.skill_charge_state"
---@type SkillBurstState
local SkillBurstState = require "common.state.skill_burst_state"
---@type SkillMoveState
local SkillMoveState = require "common.state.skill_move_state"
--- @type SkillFlyState : RoleStateBase
local SkillFlyState = require "common.state.skill_fly_state"
--- @type RoleStateKnockDown : RoleStateBase
local RoleStateKnockDown = require "common.state.knock_down_state"
--- @type SkillDragState : RoleStateBase
local SkillDragState = require "common.state.skill_drag_state"

function RoleStateHelper:init()
    self.typeToClassDict = {}
    self.typeToClassDict[Define.RoleStatus.BASE_STATE] = RoleStateBase
    self.typeToClassDict[Define.RoleStatus.BATTLE_PRE] = RoleBattlePreState
    self.typeToClassDict[Define.RoleStatus.BATTLE_STATE] = RoleBattleState
    self.typeToClassDict[Define.RoleStatus.DEAD] = RoleBattleDeadState
    self.typeToClassDict[Define.RoleStatus.BLOW_AWAY] = RoleBlowAwayState
    self.typeToClassDict[Define.RoleStatus.IN_TELEPORT] = InTeleportState
    self.typeToClassDict[Define.RoleStatus.SKILL_ACTION_STATE] = SkillActionState
    self.typeToClassDict[Define.RoleStatus.SKILL_CHARGE_STATE] = SkillChargeState
    self.typeToClassDict[Define.RoleStatus.VERTIGO] = RoleStateVertigo
    self.typeToClassDict[Define.RoleStatus.FREEZE] = RoleStateFreeze
    self.typeToClassDict[Define.RoleStatus.SKILL_BURST_STATE] = SkillBurstState
    self.typeToClassDict[Define.RoleStatus.SKILL_MOVE_STATE] = SkillMoveState
    self.typeToClassDict[Define.RoleStatus.SKILL_FLY_STATE] = SkillFlyState
    self.typeToClassDict[Define.RoleStatus.KNOCK_DOWN] = RoleStateKnockDown
    self.typeToClassDict[Define.RoleStatus.DRAG] = SkillDragState

    self.stateClassList = {}
    self.entityStateList = {}

    self:initEvent()
end

function RoleStateHelper:initEvent()
    if World.isClient then
        Lib.subscribeEvent(Event.EVENT_ENTITY_SPAWN, function(objID)
            local entity = World.CurWorld:getEntity(objID)
            if entity and entity:isValid() then
                entity:exitStateType(Define.RoleStatus.DEAD)
            end
        end)
    end
end

function RoleStateHelper:createOneStateClass(stateType)
    if not self.stateClassList[stateType] then
        if self.typeToClassDict[stateType] then
            self.stateClassList[stateType] = self.typeToClassDict[stateType].new(stateType)
        else -- 没有子类就都用基础类
            self.stateClassList[stateType] = self.typeToClassDict[Define.RoleStatus.BASE_STATE].new(stateType)
        end
    end
    if not self.entityStateList[stateType] then
        self.entityStateList[stateType] = {}
    end
end

function RoleStateHelper:enterRoleState(objID, stateType, ...)
    self:createOneStateClass(stateType)
    if Define.RoleStatusSuperposition[stateType] then
        if self.entityStateList[stateType][objID] then
            self.entityStateList[stateType][objID] = self.entityStateList[stateType][objID] + 1
        else
            self.entityStateList[stateType][objID] = 1
        end
        if Define.RoleStatusCanReset[stateType] or self.entityStateList[stateType][objID] == 1 then
            self:tryBreakState(objID,stateType)
            self.stateClassList[stateType]:enterState(objID, ...)
        end
    else
        local needEnter = false
        if self.entityStateList[stateType][objID] and self.entityStateList[stateType][objID] > 0 then
            if Define.RoleStatusCanReset[stateType] then
                needEnter = true
            end
        else
            needEnter = true
        end
        self.entityStateList[stateType][objID] = 1
        if needEnter then
            self:tryBreakState(objID,stateType)
            self.stateClassList[stateType]:enterState(objID, ...)
        end
    end
end

function RoleStateHelper:exitRoleState(objID, stateType, ...)
    if not self.stateClassList[stateType] then
        return
    end
    if self.entityStateList[stateType][objID] and self.entityStateList[stateType][objID]<=0 then
        return
    end
    if Define.RoleStatusSuperposition[stateType] then
        if self.entityStateList[stateType][objID] then
            self.entityStateList[stateType][objID] = self.entityStateList[stateType][objID] - 1
        else
            self.entityStateList[stateType][objID] = 0
        end
        if self.entityStateList[stateType][objID] <= 0 then
            self.stateClassList[stateType]:exitState(objID, ...)
        end
    else
        self.entityStateList[stateType][objID] = 0
        self.stateClassList[stateType]:exitState(objID, ...)
    end
end

function RoleStateHelper:getRoleStateList(objID)
    local stateList = {}
    for stateType, val in pairs(self.entityStateList) do
        if val[objID] then
            table.insert(stateList, stateType)
        end
    end
    return stateList
end

function RoleStateHelper:isInState(objID, stateType)
    if not self.entityStateList[stateType] then
        return false
    end
    if self.entityStateList[stateType][objID] then
        return self.entityStateList[stateType][objID] > 0
    else
        return false
    end
end

function RoleStateHelper:removeEntityStateData(objID)
    for stateType, _ in pairs(self.entityStateList) do
        if self.stateClassList[stateType] then
            self.stateClassList[stateType]:exitState(objID)
            self.entityStateList[stateType][objID] = 0
        end
    end
end

function RoleStateHelper:tryBreakState(objID,stateType)
    if Define.RoleStatusBreak[stateType] then
        for _, v in pairs(Define.RoleStatusBeBreak) do
            --print("------------------------------ tryBreakState",objID,v)
            self:exitRoleState(objID, v)
        end
    end
end

RoleStateHelper:init()
return RoleStateHelper
