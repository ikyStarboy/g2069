---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/3/23 15:32
---

local RoleStateBase = require "common.state.base_state"

--- @class SkillActionState : RoleStateBase
local SkillActionState = Lib.class("SkillActionState", RoleStateBase)
---@type GameSkillHelper
local GameSkillHelper = T(Lib, "GameSkillHelper")
---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")
---@type GameSkillCastHelper
local GameSkillCastHelper = T(Lib,"GameSkillCastHelper")

function SkillActionState:init(type)
    RoleStateBase.init(self, type or Define.RoleStatus.SKILL_ACTION_STATE)
end

function SkillActionState:enterState(objID, skillMoveId,chargeTimeRate)
    RoleStateBase.enterState(self, objID)
    local entity=World.CurWorld:getEntity(objID)
    if not entity or not entity:isValid() or not skillMoveId then
        return
    end
    local duration=GameSkillHelper:getSkillTotalTime(skillMoveId,entity)
    self:stopTimer(entity)
    --print("++++++++++++++++++++++++++++++  SkillActionState:enterState",objID, skillMoveId,duration)
    entity.exitActionStateTimer=World.Timer(math.floor((duration/1000)*20),function ()
        if entity:isValid() then
            entity:exitStateType(Define.RoleStatus.SKILL_ACTION_STATE)
        end
    end)
    entity.castSkillMoveId=skillMoveId

    if World.isClient and entity.objID==Me.objID then
        Me:checkAddStopMove(SkillMovesConfig:checkStopMoveOnCast(skillMoveId))
        Me:setPlayerGravity(SkillMovesConfig:checkGravityLimitOnCast(skillMoveId) and 0 or nil,Define.GravityPriority.SkillActionLimit)
        Me:setPlayerBodyRotation(not SkillMovesConfig:checkRotateLimitOnCast(skillMoveId),Define.BodyRotationPriority.SkillActionLimit)
        local cfg=SkillMovesConfig:getNewSkillConfig(skillMoveId)
        if cfg then
            Me.isNormalAttackAction=cfg.isNormalAttack
            if cfg.move then
                if cfg.move.delay > 0 then
                    if entity:isValid() then
                        entity.delayActionMoveTimer=World.Timer(cfg.move.delay*20,function ()
                            if not Me:isInImmobilityState() then
                                Me:enterStateType(Define.RoleStatus.SKILL_MOVE_STATE,skillMoveId,false,chargeTimeRate)
                            end
                        end)
                    end
                else
                    Me:enterStateType(Define.RoleStatus.SKILL_MOVE_STATE,skillMoveId,false,chargeTimeRate)
                end
            end
            if not cfg.isNormalAttack then
                GameSkillCastHelper:clearStrategy(Define.GameSkillCastType.Combo)
            end
        end
        --print("------------------- skill action enterState,entity.checkRotateLimitOnCast",SkillMovesConfig:checkRotateLimitOnCast(skillMoveId))
    end
end

function SkillActionState:exitState(objID)
    RoleStateBase.exitState(self, objID)
    local entity=World.CurWorld:getEntity(objID)
    if not entity or not entity:isValid()  then
        return
    end
    self:stopTimer(entity)
    if entity.castSkillMoveId then
        local cfg = SkillMovesConfig:getNewSkillConfig(entity.castSkillMoveId)
        if cfg then
            if entity:getUpperActionTicks(cfg.skillInf.castAction)>=9999 then
                entity:updateUpperAction(cfg.skillInf.castAction, 1)
            end
        end
    end

    if World.isClient and entity.objID==Me.objID then
        Me:checkSubStopMove(SkillMovesConfig:checkStopMoveOnCast(Me.castSkillMoveId))
        Me:setPlayerGravity(nil,Define.GravityPriority.SkillActionLimit)
        Me:setPlayerBodyRotation(nil,Define.BodyRotationPriority.SkillActionLimit)
        Me.isNormalAttackAction=nil
        --print("----------- exit skill action ,Me:isInStateType(Define.RoleStatus.BATTLE_STATE)",Me:getActionMappingData().isInBattleState)
    end
    --print("================================================================== SkillActionState:exitState",objID)
end

function SkillActionState:stopTimer(entity)
    if entity.exitActionStateTimer then
        entity.exitActionStateTimer()
        entity.exitActionStateTimer=nil
    end
    if entity.delayActionMoveTimer then
        entity.delayActionMoveTimer()
        entity.delayActionMoveTimer=nil
    end
end

return SkillActionState