---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/3/23 14:50
---

local RoleStateBase = require "common.state.base_state"
local socket = require("socket.core")
--- @class RoleBattleDeadState : RoleStateBase
local RoleBattleDeadState = Lib.class("RoleBattleDeadState", RoleStateBase)

function RoleBattleDeadState:init(type)
    RoleStateBase.init(self, type or Define.RoleStatus.DEAD)
    self.delayShowTimer = {}
end

function RoleBattleDeadState:enterState(objID, hitMoveTime, attacker)
    RoleStateBase.enterState(self, objID)
    local entity = World.CurWorld:getEntity(objID)
    if entity and entity:isValid() then
        entity:exitStateType(Define.RoleStatus.KNOCK_DOWN)
        local cfg = entity:cfg()
        if World.isClient then
            local attackerName = ""
            if attacker and attacker.name then
                attackerName = attacker.name
            end
            local function doDeadEffect()
                if not entity or not entity:isValid() then
                    return
                end
                if cfg.deadAction and cfg.deadAction ~= "" then
                    entity:updateUpperAction(cfg.deadAction, -1)
                    entity:setAlwaysAction(cfg.deadAction)
                end

                local deathEffect = cfg.deathEffect
                local entityPos = entity:getPosition()
                if deathEffect then
                    local time = math.min(deathEffect.delayTime or 1, 20)
                    local effectPathName = ResLoader:filePathJoint(cfg, deathEffect.effect)
                    World.Timer(time, function()
                        local time = tonumber(deathEffect.time)
                        time = time and time / 20 * 1000 or -1
                        if entity and entity:isValid() then
                            entityPos = entity:getPosition()
                        end
                        local targetPos = Lib.v3add(entityPos, deathEffect.pos or {x = 0, y = 0, z = 0})
                        Blockman.instance:playEffectByPos(effectPathName, targetPos, 0, time)
                    end)
                end

                if cfg.deadSound then
                    local time = math.min(cfg.deadSound.delayTime or 1, 20)
                    World.Timer(time, function()
                        if self and self:isValid() then
                            self:playSound(cfg.deadSound, nil, cfg.deadSound.noFollow)
                        else
                            Me:playSound(cfg.deadSound, nil, cfg.deadSound.noFollow)
                        end
                        return false
                    end)
                end
            end
            if hitMoveTime and hitMoveTime > 0 then
                entity.updateTimer = entity:lightTimer("RoleBattleDeadState:enterState", hitMoveTime, function()
                    if entity and entity:isValid() then
                        doDeadEffect()
                        if Me.objID == objID then
                            UI:openWindow("UI/main/gui/win_revive_wait",nil,nil, attackerName)
                        end
                    end
                end)
            else
                -- 防止死倒地后还转向
                self.delayShowTimer[objID] = World.Timer(2, function()
                    doDeadEffect()
                end)
                if Me.objID == objID then
                    UI:openWindow("UI/main/gui/win_revive_wait", nil,nil, attackerName)
                end
            end
            if Me.objID == objID then
                Lib.emitEvent(Event.EVENT_CLIENT_PLAYER_DEAD)
                Lib.emitEvent(Event.EVENT_UPDATE_NPC_DIALOG_CLOSE)
            end
        else
            if not entity.isPlayer then
                local control = entity:getAIControl()
                if control then
                    control:setTargetPos()
                    entity:stopAI()
                end
            end
        end
    end
end

function RoleBattleDeadState:exitState(objID)
    RoleStateBase.exitState(self, objID)
    local entity = World.CurWorld:getEntity(objID)
    if not entity or not entity:isValid() then
        return
    end
    if entity.updateTimer then
        entity.updateTimer()
        entity.updateTimer = nil
    end
    if self.delayShowTimer[objID] then
        self.delayShowTimer[objID]()
        self.delayShowTimer[objID] = nil
    end
    entity:resetEntityProp("moveAcc")
    entity:resetEntityProp("moveSpeed")
    entity:resetEntityProp("moveFactor")
    entity:resetEntityProp("gravity")
    if World.isClient then
        if entity and entity:isValid() then
            if entity.updateTimer then
                entity.updateTimer()
                entity.updateTimer = nil
            end
            entity:setAlwaysAction("")
        end
        if Me.objID == objID then
            UI:closeWindow("UI/main/gui/win_revive_wait")
        end
    end
end

return RoleBattleDeadState