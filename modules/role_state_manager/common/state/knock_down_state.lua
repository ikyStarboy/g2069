---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/4/11 17:58
---

local RoleStateBase = require "common.state.base_state"

--- @class RoleStateKnockDown : RoleStateBase
local RoleStateKnockDown = Lib.class("RoleStateKnockDown", RoleStateBase)

function RoleStateKnockDown:init(type)
    RoleStateBase.init(self, type or Define.RoleStatus.KNOCK_DOWN)
end

local EXIT_TIME=2

function RoleStateKnockDown:enterState(objID,buffName,knockDownTime)
    --print("++++++++++++++++++++++++++++++ RoleStateKnockDown:enterState",objID,buffName,knockDownTime)
    local onGroundTime=knockDownTime or 2
    RoleStateBase.enterState(self, objID)
    local entity=World.CurWorld:getEntity(objID)
    if not entity or not entity:isValid() then
        return
    end
    self:stopTimer(entity)
    if not World.isClient then
        if entity:isMonster() then
            local control = entity:getAIControl()
            control:setPauseState(true,Define.PauseStatePriority.KnockDown)
        end

        entity.enterKnockDownTime=World.CurWorld:getTickCount()
        if entity.isPlayer then
            entity.knockDownCheckGroundTimer=World.Timer(1,function()
                --print(">>>>>>>>>>>>>>>>knockDownCheckGroundTimer player ",entity.onGround,entity:getPlayerBeBlowAway())
                if entity:isValid() then
                    if (entity.onGround and (entity:getPlayerBeBlowAway()==1 or entity.beShootDown ) ) or entity:getFlyMode() ~= 0
                        or World.CurWorld:getTickCount()-entity.enterKnockDownTime>20*EXIT_TIME then
                        --print("----------------------------- ttttttttttttttimer",entity.onGround,entity:getPlayerBeBlowAway(),
                        --        entity:getFlyMode(),World.CurWorld:getTickCount()-entity.enterKnockDownTime,entity.beShootDown)
                        entity.knockDownRemoveBuffTimer=World.Timer(20*onGroundTime,function ()
                            self:removeBuff(entity,buffName)
                        end)
                        return false
                    end
                    return true
                end
                return false
            end)
        else
            entity.knockDownCheckGroundTimer=World.Timer(1,function()
               --print(">>>>>>>>>>>>>>>>knockDownCheckGroundTimer ",entity.onGround)
                if entity:isValid() then
                    if not entity.onGround  and not entity:isInStateType(Define.RoleStatus.BLOW_AWAY) then
                        entity:tryMove(Vector3.Zero,Vector3.Zero)
                        entity:setPosition(entity:getPosition())
                    end
                    if entity.onGround or World.CurWorld:getTickCount()-entity.enterKnockDownTime>20*EXIT_TIME then
                        entity.knockDownRemoveBuffTimer=World.Timer(20*onGroundTime,function ()
                            self:removeBuff(entity,buffName)
                        end)
                        return false
                    end
                    return true
                end
                return false
            end)
        end
    else
        if objID == Me.objID then
            Me:updateDisableControlCounts(1)
            Me:checkAddStopMove(true)
            Me:setPlayerBodyRotation(false,Define.BodyRotationPriority.KnockDownLimit)
        end
        local hitDownAni1Name=World.cfg.game_skillSetting.hitDownState.hitDownAni1Name or "g2069_boy_fall_1"
        local hitDownAni2Name=World.cfg.game_skillSetting.hitDownState.hitDownAni2Name or "g2069_boy_fall_2"
        local hitDownAni3Name=World.cfg.game_skillSetting.hitDownState.hitDownAni3Name or "g2069_boy_fall_3"
        local hitDownEffect=World.cfg.game_skillSetting.hitDownState.hitDownEffect or "g2069_jump_end.effect"
        local aniDuration=0
        if hitDownAni1Name and #hitDownAni1Name > 0 then
            aniDuration=entity:updateUpperAction(hitDownAni1Name,-1)
        end
        --print("-------------------------hitDownState ,entity.objID,aniDuration",entity.objID,aniDuration)
        if aniDuration>0 and hitDownAni2Name and #hitDownAni2Name>0  then
            entity.knockDownCheckAniTimer=World.Timer(aniDuration,function ()
                if entity:isValid() then
                    entity:updateUpperAction(hitDownAni2Name, -1,true, 0, true)
                    if entity:getFlyMode() ~= 0 then
                        return
                    end
                    entity.knockDownCheckFallGroundTimer=World.Timer(1,function ()
                        if entity:isValid() then
                            if entity:isInStateType(Define.RoleStatus.DEAD) then
                                return false
                            end
                            local isOnGround=entity.onGround and entity:getRenderPosition().y <= entity:getPosition().y
                            --print(">>>>>>>>>>>>> check on knock down entity.onGround",entity.onGround,entity:getRenderPosition().y,
                            --        entity:getPosition().y,entity:getPlayerBeBlowAway())
                            if isOnGround and (not entity.isPlayer or entity:getPlayerBeBlowAway()==1) then
                                --print("+++++++++++  knock down  on ground,Y offset",entity:getRenderPosition().y,entity:getPosition().y)
                                if hitDownAni3Name and #hitDownAni3Name>0 then
                                    entity:updateUpperAction(hitDownAni3Name, 999)
                                end
                                if hitDownEffect and #hitDownEffect>0 then
                                    WorldEffectManager.Instance():addSimpleEffect(hitDownEffect, entity:getRenderPosition(),
                                            0, 0,0, -1,Lib.v3(1,1,1), "")
                                end
                                return false
                            end
                            return true
                        end
                    end)
                end
            end)
        end
    end
end

function RoleStateKnockDown:removeBuff(entity,buffName)
    if entity:isValid() then
        local buff = entity:getTypeBuff("fullName", buffName)
        --print(">>>>>>>>>>>>>>>>knockDownCheckGroundTimer ground ",buffName,buff)
        entity:removeBuff(buff)
    end
end

function RoleStateKnockDown:exitState(objID)
    --print("-------------------------------- RoleStateKnockDown:exitState",objID)
    RoleStateBase.exitState(self, objID)
    local entity=World.CurWorld:getEntity(objID)
    if not entity or not entity:isValid() then
        return
    end
    self:stopTimer(entity)
    if not World.isClient then
        if entity:isMonster() then
            local control = entity:getAIControl()
            control:setPauseState(nil,Define.PauseStatePriority.KnockDown)
        end
        entity.beShootDown=false
    else
        if objID == Me.objID then
            Me:updateDisableControlCounts(-1)
            Me:checkSubStopMove(true)
            Me:setPlayerBodyRotation(nil,Define.BodyRotationPriority.KnockDownLimit)
        end
        entity:updateUpperAction("idle", 1)
    end
end

function RoleStateKnockDown:stopTimer(entity)
    if entity.knockDownCheckFallGroundTimer then
        entity.knockDownCheckFallGroundTimer()
        entity.knockDownCheckFallGroundTimer=nil
    end
    if entity.knockDownCheckGroundTimer then
        entity.knockDownCheckGroundTimer()
        entity.knockDownCheckGroundTimer=nil
    end
    if entity.knockDownCheckAniTimer then
        entity.knockDownCheckAniTimer()
        entity.knockDownCheckAniTimer=nil
    end
    if entity.knockDownRemoveBuffTimer then
        entity.knockDownRemoveBuffTimer()
        entity.knockDownRemoveBuffTimer=nil
    end
end

return RoleStateKnockDown