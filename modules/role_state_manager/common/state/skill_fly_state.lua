---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/3/17 17:08
---

local RoleStateBase = require "common.state.base_state"

--- @class SkillFlyState : RoleStateBase
local SkillFlyState = Lib.class("SkillFlyState", RoleStateBase)
---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")
---@type GameSkillCastHelper
local GameSkillCastHelper = T(Lib,"GameSkillCastHelper")

function SkillFlyState:init(type)
    RoleStateBase.init(self, type or Define.RoleStatus.SKILL_BURST_STATE)
end

function SkillFlyState:enterState(objID,skillMoveId)
    --print("+++++++++++++++++++++++++ SkillFlyState:enterState ",objID,skillMoveId,SkillMovesConfig:checkRotateLimitOnCast(skillMoveId))
    RoleStateBase.enterState(self, objID)
    if not World.isClient then
        local entity = World.CurWorld:getEntity(objID)
        if entity and entity:isValid() then
            entity.flySkillMoveId=skillMoveId
            self:stopTimer(entity)
            entity:setFlyState({fly=1,skillMoveId=skillMoveId})
        end
    else
        local entity = World.CurWorld:getEntity(objID)
        if entity and entity:isValid() and entity.objID==Me.objID then
            self:stopTimer(entity)
            entity.skillFlyCtrlTimer=World.Timer(1,function ()
                Blockman.instance.gameSettings.poleForward = 1
                return true
            end)

            --entity:setCalcYawBySpeedDir(0,Define.CalcYawPriority.FlyLimit)
            if SkillMovesConfig:checkRotateLimitOnCast(skillMoveId) then
                entity:setPlayerBodyRotation(false,Define.BodyRotationPriority.FlyLimit)
                Me:setProp("moveByEntityRotationYaw", 1)
                Me:setCtrlLimitByFlyState(true)
            end
            local cfg=SkillMovesConfig:getNewSkillConfig(skillMoveId)
            if cfg then
                Me:setEntityProp("moveFactor",cfg.flySpeedRate)
                if not cfg.isNormalAttack then
                    GameSkillCastHelper:clearStrategy(Define.GameSkillCastType.Combo)
                end
            end
        end
    end
end

function SkillFlyState:exitState(objID)
    --print("============================ SkillFlyState:exitState ",objID)
    RoleStateBase.exitState(self, objID)
    if not World.isClient then
        local entity = World.CurWorld:getEntity(objID)
        if entity and entity:isValid() then
            self:stopTimer(entity)
            entity:setFlyState({fly=0})
            local skillCfg =  SkillMovesConfig:getNewSkillConfig(entity.flySkillMoveId)
            --print("-------------------------SkillFlyState:exitState",entity.flySkillMoveId,#skillCfg.buffList)
            if skillCfg and skillCfg.buffList then
                for _, buffId in pairs(skillCfg.buffList) do
                    entity:updateSkillBuffById(buffId, false)
                end
            end
        end
    else
        local entity = World.CurWorld:getEntity(objID)
        if entity and entity:isValid()  then
            entity:exitStateType(Define.RoleStatus.SKILL_ACTION_STATE)
            if entity.objID == Me.objID then
                self:stopTimer(entity)
                Blockman.instance.gameSettings.poleForward = 0
                --entity:setCalcYawBySpeedDir(nil,Define.CalcYawPriority.FlyLimit)
                entity:setPlayerBodyRotation(nil,Define.BodyRotationPriority.FlyLimit)
                Me:setProp("moveByEntityRotationYaw", 0)
                Me:resetEntityProp("moveFactor")
                Me:setCtrlLimitByFlyState(false)
            end
        end
    end
end

function SkillFlyState:stopTimer(entity)
    if entity.skillFlyTimer then
        entity.skillFlyTimer()
        entity.skillFlyTimer=nil
    end
    if entity.skillFlyCtrlTimer then
        entity.skillFlyCtrlTimer()
        entity.skillFlyCtrlTimer=nil
    end
end

Lib.subscribeEvent(Event.EVENT_GAME_ROLE_COMMON_UPDATE_ABILITY, function(success, player)
    if not success then
        return
    end
    if player and  player:isValid() then
        player:exitStateType(Define.RoleStatus.SKILL_FLY_STATE)
    end
end)

return SkillFlyState