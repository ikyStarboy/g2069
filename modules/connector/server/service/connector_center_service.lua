---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2021/4/21 15:01
---
---@class ConnectorCenterService
local ConnectorCenterService = T(Lib, "ConnectorCenterService")
---@type SConnectorCenter
local ConnectorCenter = T(Lib, "ConnectorCenter")
---@type IConnectorDispatch
local ConnectorDispatch = T(Lib, "ConnectorDispatch")

local cjson = require("cjson")

---@type uuid
local uuid = require "common.uuid"

local Game2ConnectorMsgType = {
    Connected = 10001, ---连接服务
    Disconnected = 10002, ---断开连接
    UserIn = 10003, ---玩家进入
    UserOut = 10004, ---玩家退出
}

local Connector2GameMsgType = {
    TestMsg = 10005, ---测试消息
    ServiceUpdate = 10010, ---服务更新，重新请求新地址连接
    Connected = 10011, ---连接服务成功回调
}

function ConnectorCenterService:init()
    self.requestIdList = {}
end

function ConnectorCenterService:initMsgFunc()
    ConnectorDispatch:registerFunc(Connector2GameMsgType.ServiceUpdate, self.onUpdateService, self)
    ConnectorDispatch:registerFunc(Connector2GameMsgType.TestMsg, self.onTestMsg, self)
    ConnectorDispatch:registerFunc(Connector2GameMsgType.Connected, self.onConnected, self)
end

---@private
function ConnectorCenterService:onUpdateService()
    Lib.logInfo("[ConnectorCenterService:onUpdateService]")
    self:sendDisconnected(true)
    ConnectorCenter:createConnect()
end

---@private
function ConnectorCenterService:onTestMsg(type, targets, data)
    Lib.logInfo("[ConnectorCenterService:onTestMsg] type=" .. type)
    Lib.logInfo("[ConnectorCenterService:onTestMsg] targets=" .. cjson.encode(targets))
    Lib.logInfo("[ConnectorCenterService:onTestMsg] data=" .. data)
    return true
end

---@private
function ConnectorCenterService:onConnected()
    Lib.logInfo("[ConnectorCenterService:onConnected]")
    local players = Game.GetAllPlayers() or {} -- PlayerManager:getAllPlayer()
    for _, player in pairs(players) do
        if player and player:isAlivePlayer() then
            self:sendUserIn(player.platformUserId)
        end
    end
    ConnectorCenter:sendCacheMsg()
end

function ConnectorCenterService:sendConnected()
    local config = Server.CurServer:getConfig()
    local data = {}
    data.gameId = config.gameId
    data.gameType = config.gameType
    data.engineVersion = EngineVersionSetting.getEngineVersion()
    data.regionId = config.regionId
    data = cjson.encode(data)
    Lib.logInfo("[ConnectorCenterService:sendConnected]", data)
    ConnectorCenter:sendMsg(Game2ConnectorMsgType.Connected, 0, data)
end

function ConnectorCenterService:sendDisconnected(jump)
    local config = Server.CurServer:getConfig()
    local data = {}
    data.gameId = config.gameId
    data.jump = jump
    data = cjson.encode(data)
    Lib.logInfo("[ConnectorCenterService:sendDisconnected]", data)
    ConnectorCenter:sendMsg(Game2ConnectorMsgType.Disconnected, 0, data)
end

function ConnectorCenterService:sendUserIn(userId)
    if not userId then
        Lib.logError("sendUserIn userId is nil",debug.traceback())
        return
    end

    local gameId = Server.CurServer:getGameId()
    self.requestIdList[userId] = uuid() .. "-" .. gameId .. "-" .. os.time()
    local data = {}
    data.gameId = gameId
    data.userId = userId
    data.requestId = self.requestIdList[userId]
    data = cjson.encode(data)
    Lib.logInfo("[ConnectorCenterService:sendUserIn]", data)
    ConnectorCenter:sendMsg(Game2ConnectorMsgType.UserIn, 0, data)
end

function ConnectorCenterService:sendUserOut(userId)
    local data = {}
    data.gameId = Server.CurServer:getGameId()
    data.userId = userId
    data.requestId = self.requestIdList[userId]
    data = cjson.encode(data)
    Lib.logInfo("[ConnectorCenterService:sendUserOut]", data)
    ConnectorCenter:sendMsg(Game2ConnectorMsgType.UserOut, 0, data)
    self.requestIdList[userId] = nil
end

ConnectorCenterService:init()