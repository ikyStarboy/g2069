---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2021/4/20 16:28
---
---@class IConnectorDispatch : cls
local IConnectorDispatch = class("ConnectorDispatch")
local cjson = require "cjson"

local v_type = type

function IConnectorDispatch:ctor()
    self.isDebug = false
    self.connectorMsgFuncList = {}
end

---@protected
---@param type number 消息类型
---@param targets number[] 接收者userId列表
---@param data table | string 接收数据
function IConnectorDispatch:onMsgReceive(type, targets, data)
    if self.isDebug then
        Lib.logInfo("[IConnectorDispatch:onMsgReceive] type=" .. type)
        Lib.logInfo("[IConnectorDispatch:onMsgReceive] targets=" .. Lib.v2s(targets))
        if v_type(data) == "string" then
            Lib.logInfo("[IConnectorDispatch:onMsgReceive] data=" .. data)
        else
            Lib.logInfo("[IConnectorDispatch:onMsgReceive] data=" .. cjson.encode(data))
        end
    end

    local isIntercept = false
    local funcList = self.connectorMsgFuncList[type]
    if funcList then
        for _, funcData in pairs(funcList) do
            isIntercept = funcData.func(table.unpack(funcData.params), type, targets, data) or isIntercept
        end
    end

    return isIntercept
end

---@function receiveFunc
---@return boolean 是否不将信息下发到客户端，返回true则不下发到客户端

---@param func receiveFunc
function IConnectorDispatch:registerFunc(type, func, ...)
    self.connectorMsgFuncList[type] = self.connectorMsgFuncList[type] or {}
    local funcList = self.connectorMsgFuncList[type]
    table.insert(funcList, { func = func, params = {...} })
end

return IConnectorDispatch