---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2021/4/20 15:20
---
require "client.connector_event"
require "client.connector_dispatch"
require "common.i_connector_center"

local v_type = type

---@class CConnectorCenter : ConnectorCenter
local CConnectorCenter = T(Lib, "ConnectorCenter")
local cjson = require "cjson"

function CConnectorCenter:start()
    Lib.subscribeEvent(Event.EVENT_CONNECTOR_MSG_RECEIVE, function(param)
        local type = param["type"]
        local data = param["data"]
        local targets = param["targets"]
        local success, result = pcall(cjson.decode, data or "{}")
        if success then
            self:onMsgReceive(type, targets, result)
        end
    end)

    Lib.subscribeEvent(Event.EVENT_CONNECTOR_MSG, function(data)
        if data.room then
            self:sendRoomMsg(data.type, data.data)
        else
            self:sendMsg(data.type, data.data)
        end
    end)
end

---发送消息
---@overload fun(self : ConnectorCenter, type : number, data : string | table)
---@param type number 消息类型
---@param data string | table 发送数据
function CConnectorCenter:sendMsg(type, data)
    if v_type(data) == "table" then
        data = cjson.encode(data)
    end

    Me:sendPacket({
        pid = "ConnectorMsg",
        data = {
            userId = Me.platformUserId,
            type = type,
            data = data
        }
    })
end

function CConnectorCenter:sendRoomMsg(type, data)
    if v_type(data) == "table" then
        data = cjson.encode(data)
    end

    Me:sendPacket({
        pid = "RoomConnectorMsg",
        data = {
            userId = Me.platformUserId,
            type = type,
            data = data,
            room = true
        }
    })
end

CConnectorCenter:start()