---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/3/2 12:08
---

---@class MonsterBornHelper
local MonsterBornHelper = T(Lib, "MonsterBornHelper")
---@type MonsterRegionConfig
local MonsterRegionConfig = T(Config, "MonsterRegionConfig")
---@type MonsterConfig
local MonsterConfig = T(Config, "MonsterConfig")

function MonsterBornHelper:init()
    -- 怪物池，用于管理怪物的数量、创建，刷新
    self.monsterPoolList = {}

    self.monsterDownList = {}
    World.Timer(20,function()
        self:updateMonsterPool()
        return true
    end)
end

function MonsterBornHelper:pushOneRegionInfo(part, map)
    local regionName = part.properties.name
    local monsterRegion = MonsterRegionConfig:getCfgById(regionName)
    if not monsterRegion then
        return
    end

    local partScale = part:getScale()
    local partPos = part:getPosition()
    local partId = part:getInstanceID()
    local regionCfg = {
        map = map,
        partId = partId,
        maxExistNum = monsterRegion.maxExistNum,
        refreshTime = monsterRegion.refreshTime,
        maxMoveDistance = monsterRegion.resetToBorn[1] or 1,
        maxHeightDistance = monsterRegion.resetToBorn[2] or 1,
        birthMinX = math.floor((partPos.x - partScale.x/2)*100),
        birthMaxX = math.floor((partPos.x + partScale.x/2)*100),
        birthMinZ = math.floor((partPos.z - partScale.z/2)*100),
        birthMaxZ = math.floor((partPos.z + partScale.z/2)*100),
        monsterData = monsterRegion.monsterList
    }
    if monsterRegion.fixedPos == 1 then
        regionCfg.fixedPos = partPos
    end
    if monsterRegion.birthY then
        regionCfg.birthY = monsterRegion.birthY
    else
        regionCfg.birthY = partPos.y
    end
    self.monsterPoolList[partId] = {}
    self.monsterPoolList[partId].regionCfg = regionCfg
    self.monsterPoolList[partId].monsterList = {}
end

function MonsterBornHelper:updateMonsterPool()
    for partId, regionData in pairs(self.monsterPoolList) do
        self:refreshCurRegion(partId)
    end
end

-- 刷新当前怪物区域
function MonsterBornHelper:refreshCurRegion(partId)
    local curMonsterNum = 0
    local regionData = self.monsterPoolList[partId]
    for objID, monsterInfo in pairs(regionData.monsterList) do
        if monsterInfo.deadTime then
            if os.time() - monsterInfo.deadTime >= regionData.regionCfg.refreshTime then
                self.monsterPoolList[partId].monsterList[objID] = nil
            else
                curMonsterNum = curMonsterNum + 1
            end
        else
            local entity = World.CurWorld:getObject(objID)
            if not entity or not entity:isValid() then
                self.monsterPoolList[partId].monsterList[objID] = nil
            else
                curMonsterNum = curMonsterNum + 1
            end
        end
    end

    -- 随机创建新的怪物
    for i = curMonsterNum, self.monsterPoolList[partId].regionCfg.maxExistNum - 1 do
        self:createRegionMonster(partId)
    end
end

-- 创建区域怪物
function MonsterBornHelper:createRegionMonster(partId)
    local regionCfg = self.monsterPoolList[partId].regionCfg
    local index = math.random(1, #regionCfg.monsterData)
    local monsterId = regionCfg.monsterData[index]
    local pos = regionCfg.fixedPos or {
        x= math.random(regionCfg.birthMinX, regionCfg.birthMaxX)/100,
        y= regionCfg.birthY,
        z= math.random(regionCfg.birthMinZ, regionCfg.birthMaxZ)/100,
    }
    local entity = self:createOneMonster(regionCfg.map, monsterId, pos, regionCfg.maxMoveDistance, regionCfg.maxHeightDistance)

    self.monsterPoolList[partId].monsterList[entity.objID] = {}
    self.monsterPoolList[partId].monsterList[entity.objID].birthTime = os.time()
    self.monsterPoolList[partId].monsterList[entity.objID].birthPos = pos
    self.monsterPoolList[partId].monsterList[entity.objID].monsterId = monsterId
end

-- 创建一只怪物
function MonsterBornHelper:createOneMonster(map, monsterId, pos, maxMoveDistance, maxHeightDistance)
    local monsterConfig = MonsterConfig:getCfgByMonsterId(monsterId)
    if not monsterConfig then
        return
    end
    local params = {
        map = map,
        cfgName = monsterConfig.itemName,
        pos = pos,
        ry = math.random(0, 360),
        rp = 0
    }
    local entity = EntityServer.Create(params)

    entity:data("main").regionBirthMap = map
    entity:data("main").regionBirthPos = pos
    entity:data("main").regionMaxDis = maxMoveDistance or 9999
    entity:data("main").regionMaxHeight = maxHeightDistance or 9999

    return entity
end

function MonsterBornHelper:dragEntityToGround(entity)
    if entity and entity:isValid() then
        if  self.monsterDownList[entity.objID] then
            return
        end
        World.Timer(20, function()
            if entity and entity:isValid() then
                for _ = 1, 5 do
                    entity:tryMove(Lib.v3(0,-1,0),Vector3.Zero)
                end
                self.monsterDownList[entity.objID] = true
            end
            return false
        end)
    end
end

-- 销毁怪物
function MonsterBornHelper:destroyOneRegionMonster(objID)
    for partId, _ in pairs(self.monsterPoolList) do
        if self.monsterPoolList[partId].monsterList and self.monsterPoolList[partId].monsterList[objID]then
            self.monsterPoolList[partId].monsterList[objID].deadTime = os.time()
        end
    end

    local entity = World.CurWorld:getObject(objID)
    if not entity or not entity:isValid() then
        for partId, _ in pairs(self.monsterPoolList) do
            if self.monsterPoolList[partId].monsterList then
                self.monsterPoolList[partId].monsterList[objID] = nil
            end
        end
        return
    end

    entity:stopAI()
    entity:destroy()
end

MonsterBornHelper:init()
return MonsterBornHelper
