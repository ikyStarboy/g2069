---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/4/17 11:22
---

---@class FlyNewTipsHelper
local FlyNewTipsHelper = T(Lib, "FlyNewTipsHelper")
local cjson = require("cjson")
local guiMgr = L("guiMgr", GUIManager:Instance())

function FlyNewTipsHelper:init()
    self.tipsItemWait = {}       -- item等待队列
    self.tipsItemMsg = {}       -- item当前显示队列
    self.tipsItemCache = {}     -- item节点缓存
    self.sameTipsCDList = {}     -- 同一条tips的提示CD
    self:stopUpdateItemList()
end

function FlyNewTipsHelper:stopUpdateItemList()
    if self.updateTimer then
        self.updateTimer()
        self.updateTimer = nil
    end
    self.curTimeCounts = 0
end

function FlyNewTipsHelper:pushOneFlyNewTipsItem(itemInfo)
    local codeStr = cjson.encode(itemInfo)
    if self.sameTipsCDList[codeStr] then
        local flyTipsSetting = World.cfg.fly_new_tipsSetting or {}
        if os.time() - self.sameTipsCDList[codeStr] < (flyTipsSetting.sameTipsCDTime or 0) then
            return
        end
    end
    self.sameTipsCDList[codeStr] = os.time()
    table.insert(self.tipsItemWait, itemInfo)

    if not self.updateTimer then
        self:startUpdateItemList()
    end
end

function FlyNewTipsHelper:startUpdateItemList()
    if not self.updateTimer then
        local flyTipsSetting = World.cfg.fly_new_tipsSetting or {}
        local ticks = flyTipsSetting.tipsFresh or 2
        self.updateTimer = World.LightTimer("FlyNewTipsHelper:startUpdateItemList", ticks, function()
            self:updateItemListShow()
            return true
        end)
    end
end

function FlyNewTipsHelper:updateItemListShow()
    local flyTipsSetting = World.cfg.fly_new_tipsSetting or {}
    self.curTimeCounts = self.curTimeCounts + 1
    local curTotalNum = #self.tipsItemMsg +  #self.tipsItemWait
    for k, val in pairs(self.tipsItemMsg)  do
        local startActionTime = self.tipsItemMsg[k]:getStartActionTime()
        local passTime = self.curTimeCounts - startActionTime

        if passTime >= flyTipsSetting.oneShowTime then
            if k == 1 then
                local lastPosY = self.tipsItemMsg[k]:getItemYPosition()
                if lastPosY > flyTipsSetting.minPosY then
                    local newPosY = lastPosY - flyTipsSetting.oneTimeDistance
                    self.tipsItemMsg[k]:setItemYPosition(newPosY)
                end
            elseif k > 1 then
                local lastPosY = self.tipsItemMsg[k]:getItemYPosition()
                local prePosY = self.tipsItemMsg[k-1]:getItemYPosition()
                if lastPosY - flyTipsSetting.minDistance > prePosY then
                    local newPosY = lastPosY - flyTipsSetting.oneTimeDistance
                    self.tipsItemMsg[k]:setItemYPosition(newPosY)
                elseif curTotalNum > flyTipsSetting.maxCount then
                    self.tipsItemMsg[k - 1]:setToMaxHeightTime(self.curTimeCounts - flyTipsSetting.oneHideTime - flyTipsSetting.oneNormalTime)
                end
            end
        end

        if startActionTime > 0 then
            local lastPosY = self.tipsItemMsg[k]:getItemYPosition()
            if lastPosY <= flyTipsSetting.minPosY then
                local toMaxHeightTime = self.tipsItemMsg[k]:getToMaxHeightTime()
                if toMaxHeightTime < -9000 then
                    self.tipsItemMsg[k]:setToMaxHeightTime(self.curTimeCounts)
                    toMaxHeightTime = self.curTimeCounts
                end

                local passTime2 = self.curTimeCounts - toMaxHeightTime
                if passTime2 > flyTipsSetting.oneHideTime + flyTipsSetting.oneNormalTime then
                    self.tipsItemMsg[k]:updateAllNodeAlpha(0)
                    self:deleteOneTipsItem(k)
                elseif passTime2 > flyTipsSetting.oneNormalTime then
                    local alpha = 1-((passTime2 - flyTipsSetting.oneNormalTime)/flyTipsSetting.oneHideTime)
                    self.tipsItemMsg[k]:updateAllNodeAlpha(alpha)
                else
                    self.tipsItemMsg[k]:updateAllNodeAlpha(1)
                end
            else
                if passTime >= flyTipsSetting.oneShowTime then
                    self.tipsItemMsg[k]:updateAllNodeAlpha(1)
                elseif flyTipsSetting.oneShowTime > 0 then
                    local alpha = passTime/flyTipsSetting.oneShowTime
                    self.tipsItemMsg[k]:updateAllNodeAlpha(alpha)
                end
            end
        end
    end

    -- 创建一条新的tips
    if #self.tipsItemWait > 0 then
        local curNum = #self.tipsItemMsg
        if curNum > 0 then
            local prePosY = self.tipsItemMsg[curNum]:getItemYPosition()
            if flyTipsSetting.initPosY - flyTipsSetting.minDistance > prePosY then
                self:addOneTipsItemShow(self.tipsItemWait[1])
                table.remove(self.tipsItemWait, 1)
            end
        elseif curNum == 0 then
            self:addOneTipsItemShow(self.tipsItemWait[1])
            table.remove(self.tipsItemWait, 1)
        end
    end

    if #self.tipsItemWait <= 0 and #self.tipsItemMsg <=0 then
        self:stopUpdateItemList()
        return
    end
end

function FlyNewTipsHelper:addOneTipsItemShow(itemInfo)
    local flyTipsSetting = World.cfg.fly_new_tipsSetting or {}
    local newTipItem
    if #self.tipsItemCache > 0 then
        newTipItem = table.remove(self.tipsItemCache, 1)
        table.insert(self.tipsItemMsg, newTipItem)
    else
        newTipItem = UI:openWidget("UI/main/gui/widget_fly_new_tips")
        table.insert(self.tipsItemMsg, newTipItem)

        local root = guiMgr:getRootWindow()
        root:addChild(newTipItem:getWindow())
        newTipItem:setLevel(flyTipsSetting.tipsLevel)
    end
    newTipItem:setStartActionTime(self.curTimeCounts)
    newTipItem:setToMaxHeightTime(-9999)
    newTipItem:updateAllNodeAlpha(0)
    newTipItem:setVisible(true)
    newTipItem:initItemData(itemInfo)
end

function FlyNewTipsHelper:deleteOneTipsItem(deleteKey)
    if #self.tipsItemWait > 0 then
        local cacheTipItem = table.remove(self.tipsItemMsg, deleteKey)
        table.insert(self.tipsItemCache, cacheTipItem)
        cacheTipItem:setVisible(false)
    else
        local cacheTipItem = table.remove(self.tipsItemMsg, deleteKey)
        guiMgr:getRootWindow():removeChild(cacheTipItem:getWindow())
    end
end

FlyNewTipsHelper:init()