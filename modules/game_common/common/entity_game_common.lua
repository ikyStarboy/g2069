---
--- Generated by PluginCreator
--- game_common entity_common
--- DateTime:2023-02-24
---

---@class ActionMappingData
---@field isInBattleState boolean
---@field actionMapNormal table
---@field actionMapBattle table

local socket = require("socket.core")
---@type SkillConfig
local SkillConfig = T(Config, "SkillConfig")
---@type SprintSkillHelper
local SprintSkillHelper = T(Lib, "SprintSkillHelper")
---@type TargetConditionHelper
local TargetConditionHelper = T(Lib, "TargetConditionHelper")
---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")
--- @type SoundManager
local SoundManager = T(Lib, "SoundManager")

local Entity = Entity
local ValueDef = T(Entity, "ValueDef")
-- key				            = {isCpp,	client,	toSelf,	toOther,	init,	               saveDB}
ValueDef.actionMappingData		= {false,   false,  true,   true,      {},                      false}
ValueDef.safeModeType		= {false,   true,  true,   true,      2,                      false}  -- PK模式 0安全 1等待 2PK1 3PK2
ValueDef.newAllPlayTime		= {false,   true,  true,   false,      0,                      true}  -- 总游戏时长
ValueDef.safeBranchTask		= {false,   false,  true,   false,      0,                      false}  -- 安全模式下 支线任务完成次数

ValueDef.skillOpenShake		= {false,   true,  true,   false,      false,                      true}  -- 技能是否震动

function Entity:getSkillOpenShake()
    return self:getValue("skillOpenShake")
end

function Entity:setSkillOpenShake(value)
    self:setValue("skillOpenShake", value)
end

function Entity:getSafeBranchTask()
    return self:getValue("safeBranchTask")
end

function Entity:setSafeBranchTask(data)
    self:setValue("safeBranchTask", data)
end

function Entity:getNewAllPlayTime()
    return self:getValue("newAllPlayTime")
end

function Entity:setNewAllPlayTime(data)
    self:setValue("newAllPlayTime", data)
end

function Entity:getSafeModeType()
    return self:getValue("safeModeType")
end

function Entity:setSafeModeType(value)
    local oldModeType = self:getValue("safeModeType")
    local newModeType = value
    self:setValue("safeModeType", value)

    if newModeType ~= Define.PKModeType.pkWait then
        local loginTime = self:getLoginTs()
        local lastTime = self.lastPkModeTime or loginTime or 0
        local passTime = os.time() - lastTime
        local defaultData = {
            pk_mode = Define.PKReportKey[newModeType],
            pk_mode_before = Define.PKReportKey[oldModeType],
            pk_duration_time = passTime
        }
        Plugins.CallTargetPluginFunc("report", "report", "g2069_pk_mode", defaultData, self)
        self.lastPkModeTime = os.time()
    end
end

---@return ActionMappingData
function Entity:getActionMappingData()
    return self:getValue("actionMappingData")
end

function Entity:getPlayerIsInBattleState()
    local data=self:getActionMappingData()
    return data.isInBattleState
end

function Entity:setActionMappingData(data)
    self:setValue("actionMappingData", data)
end

---检测是否能释放技能
function Entity:checkCanFreeSkill(skillId,param)
    local donNotPlaySound=param and param.donNotPlaySound
    local isSprintSkill=param and param.isSprintSkill
    local skillMoveId=param and param.skillMoveId
    if not self:checkCanFreeSkillMove(nil, isSprintSkill,skillMoveId) then
        return false
    end

    local config = SkillConfig:getSkillConfig(skillId)
    if not config then
        return false, -1, false
    end

    if self.isPlayer then
        local curMp = self:getCurMp()
        if curMp < config.mpCost then
            if World.isClient and self.objID == Me.objID then
                if not donNotPlaySound then
                    SoundManager:playSound("short_Mp")
                end
                Plugins.CallTargetPluginFunc("fly_new_tips", "pushFlyNewTipsText", "g2069_short_mp_tips")
            end
            return false, -1
        end
    end

    local skillCd = self:getRealSkillCd(config.skillCd)
    if skillCd > 0 then
        if not World.isClient and self.isPlayer then
            ---玩家在服务器校验CD的时候条件放宽
            skillCd = skillCd * 0.7
        end
        local record = self:data(Define.VarKey.SkillCDRecord)
        if socket.gettime() - (record[skillId] or 0) < skillCd / 1000 then
            return false, -1
        end
        record[skillId] = socket.gettime()
    end
    return true, skillCd
end

function Entity:checkCanFreeSkillMove(ignoreSkillAction,isSprintSkill,skillMoveId)
    if self:isInStateType(Define.RoleStatus.DEAD) or
        self:isInStateType(Define.RoleStatus.VERTIGO) or
        self:isInStateType(Define.RoleStatus.FREEZE) or
        self:isInStateType(Define.RoleStatus.IN_TELEPORT) or
        self:isInStateType(Define.RoleStatus.DRAG) then
        return false
    end

    local isKnockDownState = self:isInStateType(Define.RoleStatus.KNOCK_DOWN)
    if isKnockDownState then
        return false
    end

    if not ignoreSkillAction then
        if self:isInStateType(Define.RoleStatus.SKILL_CHARGE_STATE) then
            return false
        end
        if self:isInStateType(Define.RoleStatus.SKILL_ACTION_STATE) then
            local isNotNormalAttack=false
            if skillMoveId then
                local cfg=SkillMovesConfig:getNewSkillConfig(skillMoveId)
                isNotNormalAttack=cfg and not cfg.isNormalAttack
            end
            local canBreakCastingSkill=isSprintSkill or isNotNormalAttack
            if not self.isNormalAttackAction or not canBreakCastingSkill then
                return false
            end
        end
    end

    return true
end

function Entity:checkCanControlPlayer()
    if self:isInImmobilityState() then
        return false
    end
    return true
end

function Entity:checkPlayerCanMove()
    if self:getIsCanNotMoveCharging() then
        return false
    end
    if self:checkPlayerMoveLimitInSkill() then
        return false
    end
    if self:isInImmobilityState() then
        return false
    end
    return true
end

function Entity:checkPlayerMoveLimitInSkill()
    if not self:isInStateType(Define.RoleStatus.SKILL_ACTION_STATE) then
        return false
    end
    return SkillMovesConfig:checkStopMoveOnCast(self.castSkillMoveId)
end

--function Entity:checkPlayerCanTurnAround()
--    if not SprintSkillHelper:canCtrlInSprint() then
--        return false
--    end
--    if self:getIsCanNotRotateCharging() then
--        return false
--    end
--    return true
--end

function Entity:checkJumpLimitBySkill()
    if self:isInStateType(Define.RoleStatus.SKILL_CHARGE_STATE) then
        return true
    end
    if self:isInStateType(Define.RoleStatus.SKILL_ACTION_STATE) then
        return not self.isNormalAttackAction
    end
    return false
end

function Entity:setEntityProp(prop, value)
    --self:recoverEntityProp(prop)
    local curValue = tonumber(self:getEntityProp(prop))
    self:deltaEntityProp(prop, -curValue + tonumber(value))
end

function Entity:resetEntityProp(prop)
    self:setProp(prop, self:prop()[prop])
end

function Entity:isInSafeRegion()
    return TargetConditionHelper:isInSafeRegion(self)
end

function Entity:isInMissionSafe()
    return TargetConditionHelper:isInMissionSafe(self)
end

function Entity:checkCanAttackTargetPlayer(defender)
    if self.objID == defender.objID then
        return false
    end
    if self:isInMissionSafe() or self:isInMissionRoom() then
        return false
    end
    if defender:isInMissionSafe() or defender:isInMissionRoom() then
        return false
    end

    local safeType1 = self:getSafeModeType()
    local safeType2 = defender:getSafeModeType()
    if safeType1 == Define.PKModeType.safe
            or safeType2 == Define.PKModeType.safe
            or safeType1 == Define.PKModeType.pkWait
            or safeType2 == Define.PKModeType.pkWait then
        return false
    end

    if safeType1 == Define.PKModeType.pk1 then
        if self:isInSafeRegion() then
            return false
        end
    end

    if safeType2 == Define.PKModeType.pk1 then
        if defender:isInSafeRegion() then
            return false
        end
    end

    return true
end

function Entity:checkSex()
    local sex = self:data("main").sex
    if sex == nil then
        if World.isClient then
            if self.objID == Me.objID and Me.userDetailData then
                return Me.userDetailData.sex
            else
                local actorName = self:getActorName()
                if string.find(actorName, "boy") then
                    return 1
                else
                    return 2
                end
            end
        end
    end
    return self:data("main").sex
end