---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/4/12 15:29
---

---@class ActionMapHelper
local ActionMapHelper = T(Lib, "ActionMapHelper")

function ActionMapHelper:init()
    self.monsterDistanceList = {}
    self:initEvent()
end

function ActionMapHelper:initEvent()
    Lib.subscribeEvent(Event.EVENT_OBJECT_INTERACTION_CHECKIN, function(objID, isCheckIn)
        local entity = World.CurWorld:getEntity(objID)
        if not entity or not entity:isValid() then
            return
        end
        if not entity:isMonster() then
            return
        end
        self.monsterDistanceList[objID] = isCheckIn
        entity:updateShowName()
    end)
end

function ActionMapHelper:checkIsNearEntity(objID)
    return self.monsterDistanceList[objID]
end

-- 更新动作映射
function ActionMapHelper:updateActionMapState(objID, value, add, actionKey, priority)
    local entity = World.CurWorld:getEntity(objID)
    if not entity or not entity:isValid() then
        return
    end
    if not entity.actionMapQueue then
        entity.actionMapQueue = {}
    end
    if add then
        for i = #entity.actionMapQueue, 1, -1 do
            if entity.actionMapQueue[i].actionKey == actionKey then
                return
            end
        end

        table.insert(entity.actionMapQueue, {
            value = value,
            actionKey = actionKey,
            priority = priority or 0
        })
        table.sort(entity.actionMapQueue, function (a, b)
            return a.priority < b.priority
        end)
    else
        local lastIndex
        local needRemove = {}
        for i = #entity.actionMapQueue, 1, -1 do
            if entity.actionMapQueue[i].actionKey == actionKey then
                lastIndex = i
                for src, dst in pairs(entity.actionMapQueue[i].value) do
                    needRemove[src] = true
                end
                table.remove(entity.actionMapQueue, i)
                break
            end
        end
        for src, _ in pairs(needRemove) do
            entity:removeActionMapping(src)
        end
        if not lastIndex then
            return
        end
    end
    self:resetPlayMapAction(entity)
end

function ActionMapHelper:resetPlayMapAction(entity)
    if not entity or not entity:isValid() then
        return
    end
    if not entity.actionMapQueue then
        entity.actionMapQueue = {}
    end

    local needChange = {}

    if entity.isPlayer then
        local data= entity:getActionMappingData()
        if data then
            local actionMap= data.isInBattleState and data.actionMapBattle or data.actionMapNormal
            if actionMap then
                for src, dst in pairs(actionMap) do
                    needChange[src] = dst
                end
            end
        end
    end

    for i = #entity.actionMapQueue, 1, -1 do
        for src, dst in pairs(entity.actionMapQueue[i].value) do
            if (not needChange[src]) or (entity.actionMapQueue[i].priority == 9999) then
                needChange[src] = dst
            end
        end
    end

    for src, dst in pairs(needChange) do
        local channel = entity:GetActionChannel(dst)
        entity:setActionMapping(src, dst)
    end
end

ActionMapHelper:init()