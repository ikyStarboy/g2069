---
--- Generated by PluginCreator
--- game_common player
--- DateTime:2023-02-24
---

local Player = Player
--function Player:xxxxx()
--end
--- @type SoundManager
local SoundManager = T(Lib, "SoundManager")
---@type SoundConfig
local SoundConfig = T(Config, "SoundConfig")

function Player:clientDoPlaySceneEffect(effectInfo)
    local action = effectInfo.action
    local scale = effectInfo.scale or 1
    if action == 'play' then
        Blockman.instance:playEffectByPos(effectInfo.effectName, effectInfo.pos, effectInfo.yaw or 0, effectInfo.time, { x = scale, y = scale, z = scale })
        if effectInfo.sound then
            SoundManager:playSound(effectInfo.sound,World.CurWorld:getEntity(effectInfo.objID))
        end
    else
        Blockman.instance:delEffect(effectInfo.effectName, effectInfo.pos)
    end
end

function Player:canStoreSkillCmd()
    if self:isInStateType(Define.RoleStatus.DEAD)
        or self:isInStateType(Define.RoleStatus.SKILL_ACTION_STATE)
        or self:isInStateType(Define.RoleStatus.VERTIGO)
        or self:isInStateType(Define.RoleStatus.KNOCK_DOWN)
        or self:isInStateType(Define.RoleStatus.FREEZE) then
        return false
    end
    return true
end

function Player:updateDisableControlCounts(val)
    if not self.disableControlCounts then
        self.disableControlCounts = 0
    end
    self.disableControlCounts = self.disableControlCounts + val
    if self.disableControlCounts < 0 then
        self.disableControlCounts = 0
    end
    if self.disableControlCounts > 0 then
        self.disableControl = true
    else
        self.disableControl = false
    end
end

function Player:updateBloomSetting()
    local gameSettings = Blockman.instance.gameSettings
    local settings = World.cfg.bloomSetting
    gameSettings:setEnableBloom(settings.enable or false)
    gameSettings:setEnableFullscreenBloom(settings.enableFullScreen or false)
    gameSettings:setBloomThreshold(settings.threshold or 0)
    gameSettings:setBloomSaturation(settings.saturation or 0)
    gameSettings:setBloomIntensity(settings.intensity or 0)
    gameSettings:setBloomBlurDeviation(settings.blurDeviation or 0)
    gameSettings:setBloomBlurMultiplier(settings.blurMultiplier or 0)
    gameSettings:setBloomBlurSampler(settings.blurSampler or 0)
end

function Player:updateSensitiveView()
    World.Timer(20, function()
        Blockman.instance.gameSettings:setCameraSensitive(World.cfg.initSensitive)
        return false
    end)
end

function Player:playerSoundAndBroadcast(soundKey)
    SoundManager:playSound(soundKey,self)
    local config = SoundConfig:getSound(soundKey)
    if config and config.is3dSound then
        self:requestBroadcastSound(soundKey,false)
    end
end

function Player:requestBroadcastSound(soundKey,includeSelf)
    self:sendPacket({pid="broadcastSound",objID=self.objID,soundKey=soundKey,includeSelf=includeSelf})
end