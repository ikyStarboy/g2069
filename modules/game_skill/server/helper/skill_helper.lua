---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/12/30 14:36
---

---@type SkillHelper
local SkillHelper = T(Lib, "SkillHelper")
---@type SkillConfig
local SkillConfig = T(Config, "SkillConfig")
---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")
---@type LuaTimer
local LuaTimer = T(Lib, "LuaTimer")

local SkillClassMapping = {
    ["BaseSkill"] = T(Skill, "BaseSkill"),
    ["AttackSkill"] = T(Skill, "AttackSkill"),
    ["JumpSkill"] = T(Skill, "JumpSkill"),
    ["SprintSkill"] = T(Skill, "SprintSkill"),
}

Lib.subscribeEvent(Event.EventGameSkillResult, function(freeEntity, skillId, targetIds)
    SkillHelper:doSkillResult(freeEntity, skillId, targetIds)
end)

function SkillHelper:doSkillResult(freeEntity, skillId, targetIds)
    local skill = SkillConfig:getSkillConfig(skillId)
    if not skill then
        return
    end
    local config = SkillMovesConfig:getSkillConfig(skill.skillId)

    local class = SkillClassMapping[config.skillClass]
    if not class then
        return
    end
    for _, targetId in pairs(targetIds) do
        local target = World.CurWorld:getEntity(targetId)
        if target then
            if freeEntity:cfg().fullName:find("player1") == nil and
                    target:cfg().fullName:find("player1") == nil then
                goto CONTINUE
            end
            class:doSkillHitResult(freeEntity, skill, target)
            :: CONTINUE ::
        end
    end
end

function SkillHelper:tryFreeSkill(from, skillId, ignoreCd)
    if not ignoreCd and not from:checkCanFreeSkill(skillId) then
        return
    end
    local skill = SkillConfig:getSkillConfig(skillId)
    if not skill then
        return
    end
    local config = SkillMovesConfig:getSkillConfig(skillId)
    if not config then
        return
    end
    Plugins.CallPluginFunc("tryEntityFreeSkill", from, skillId)
end

-------------------------------技能释放----------------------------------
---重写引擎释放技能方法，怪物释放先判断是否是自定义技能
local oldDoCastFunc = Skill.DoCast

local function doPlayerCastSkill(cfg, packet, from)
    oldDoCastFunc(cfg, packet, from)
end

local function doMonsterCastSkill(cfg, packet, from)
    local fullName = cfg.fullName
    if fullName ~= "myplugin/normal_skill" then
        if not packet then
            packet={}
        end
        packet.needPre=cfg.castAction~=nil
        packet.isCastBySever = true
        oldDoCastFunc(cfg, packet, from)
        return
    end
    local skills = from:cfg().gameSkills
    if not skills or #skills == 0 then
        return
    end
    if #skills == 1 then
        local skill = skills[1]
        SkillHelper:tryFreeSkill(from, skill.skillId)
        return
    end
    local totalWeight = 0
    for _, skill in pairs(skills) do
        totalWeight = totalWeight + skill.weight
    end
    if totalWeight == 0 then
        return
    end
    local randomWeight = math.random(1, totalWeight)
    local weight = 0
    for _, skill in pairs(skills) do
        weight = weight + skill.weight
        if randomWeight <= weight then
            SkillHelper:tryFreeSkill(from, skill.skillId)
            break
        end
    end
end

local function freeNormalSkill(from, skills)
    local skillId = skills["5"]
    if skillId then
        SkillHelper:tryFreeSkill(from, skillId)
    end
end

local function freeActiveSkill(from, skills)
    local pool = {}
    for pos = 1, 4 do
        table.insert(pool, skills[tostring(pos)])
    end
    if #pool == 0 then
        freeNormalSkill(from, skills)
        return
    end
    local skillId = pool[math.random(1, #pool)]
    SkillHelper:tryFreeSkill(from, skillId)
end

local function doArenaAICastSkill(cfg, packet, from)
    local fullName = cfg.fullName
    ---怪物技能
    local skills = from:data(Define.VarKey.EquippedSkills)
    if fullName == "myplugin/normal_skill" then
        if math.random(1, 100) < 70 then
            freeNormalSkill(from, skills)
        else
            freeActiveSkill(from, skills)
        end
        return
    end
    if fullName == "myplugin/active_skill" then
        freeActiveSkill(from, skills)
        return
    end
    oldDoCastFunc(cfg, packet, from)
end

local SkillFunc = {
    ["myplugin/player1"] = doPlayerCastSkill,
    ["myplugin/base_monster"] = doMonsterCastSkill,
    ["myplugin/arena_ai"] = doArenaAICastSkill
}

function Skill.DoCast(cfg, packet, from)
    if packet.targetID then
        local target = World.CurWorld:getObject(packet.targetID)
        if target:isInStateType(Define.RoleStatus.DEAD) then
            return
        end
    end
    local castFunc = SkillFunc[from:cfg().fullName] or SkillFunc["myplugin/" .. from:cfg().base] or doMonsterCastSkill
    castFunc(cfg, packet, from)
end

local handles = T(Player, "PackageHandlers")

---玩家释放技能，平A和主动技能
function handles:onFreeGameSkill(packet)
    local config = SkillConfig:getSkillConfig(packet.skillId)
    if not config then
        return
    end
    SkillHelper:tryFreeSkill(self, packet.skillId)
end



