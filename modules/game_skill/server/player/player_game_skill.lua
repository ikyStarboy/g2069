---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/12/25 15:35
---

local Player = Player
local handles = T(Player, "PackageHandlers")
---@type SkillBuffConfig
local SkillBuffConfig = T(Config, "SkillBuffConfig")
---@type SkillConfig
local SkillConfig = T(Config, "SkillConfig")
---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")

function handles:doGameSkillResult(packet)
    local freeEntity = World.CurWorld:getEntity(packet.freeObjID)
    if not freeEntity then
        return
    end
    Lib.emitEvent(Event.EventGameSkillResult, freeEntity, packet.skillId, packet.targets)
end

function handles:doGameSkillEntityMove(packet)
    local freeEntity = World.CurWorld:getEntity(packet.freeObjID)
    if not freeEntity then
        return
    end
    if freeEntity.isPlayer then
        freeEntity:setForceMoveToAll(packet.endPos, math.floor(packet.duration / 50))
    else
        freeEntity:setForceMove(packet.endPos, math.floor(packet.duration / 50))
        freeEntity:syncForceMove()
    end
end

function handles:C2SReloadSetting(packet)
    local Platform = require "common.platform"
    if not Game.IsDebug() or not Root.platform() == Platform.WINDOWS  then
        return
    end
    local setting = require("common.setting")
    setting:reload()
end

function handles:C2SGMUpdateMove2CVS(packet)
    local Platform = require "common.platform"
    if not Game.IsDebug() or not Root.platform() == Platform.WINDOWS  then
        return
    end
    SkillMovesConfig:initNewCfg()
end

---玩家开始蓄力
function handles:onStartChargeGameSkill(packet)
    if not SkillMovesConfig:getIsChargeSkillMove(packet.skillMoveId) then
        return
    end
    local config = SkillConfig:getSkillConfig(packet.skillId)
    if config then
        if not self:checkCanFreeSkill(packet.skillId) then
            self:sendPacket({pid="S2CExitChargeState",skillMoveId=packet.skillMoveId})
            return
        end
    else
        if not self:checkCanFreeSkillMove() then
            return
        end
    end
    self:enterStateType(Define.RoleStatus.SKILL_CHARGE_STATE,packet.skillId,packet.skillMoveId,packet.isBurst)
end

---玩家结束蓄力
function handles:onStopChargeGameSkill(packet)
    if not SkillMovesConfig:getIsChargeSkillMove(packet.skillMoveId) then
        return
    end
    if not self:isInStateType(Define.RoleStatus.SKILL_CHARGE_STATE) then
        return
    end
    
    if self.chargeInf then
        --print("*************************** handles:onStopChargeGameSkill ,minTimeFinish",self.chargeInf.minTimeFinish)
        if self.chargeInf.minTimeFinish then
            self:exitStateType(Define.RoleStatus.SKILL_CHARGE_STATE,true)
        else
            self.chargeInf.playerRelease=true
        end
    end
end

function Player:updateSkillBuffById(buffId, isAdd)
    local buffCfg = SkillBuffConfig:getCfgByBuffId(buffId)
    if buffCfg then
        if isAdd then
            self:addBuff(buffCfg.buffName, buffCfg.duration)
        else
            local buff = self:getTypeBuff("fullName", buffCfg.buffName)
            self:removeBuff(buff)
            --self:removeTypeBuff("fullName", buffCfg.buffName)
        end
    end
end

function handles:RequestUpdateSkillBuff(packet)
    local skillCfg =  SkillMovesConfig:getNewSkillConfig(packet.skillMoveId)
    if skillCfg and skillCfg.buffList then
        for _, buffId in pairs(skillCfg.buffList) do
            self:updateSkillBuffById(buffId, packet.isAdd)
        end
    end
end

function handles:RequestStopContinuous(packet)
    local moveCfg=SkillMovesConfig:getNewSkillConfig(packet.moveSkillId)
    if not moveCfg then
        return
    end

    --local packet = {
    --    pid = "S2CExitActionState",
    --    objID = self.objID,
    --}
    --self:sendPacketToTracking(packet, true)
    ---@type setting
    local setting = require "common.setting"
    local CfgMod = setting:mod("skill")
    local cfg = CfgMod:get(moveCfg.skillName)
    if not cfg then
        return
    end
    --print("=====================RequestStopContinuous",packet.skillId,packet.moveSkillId,cfg.type)
    if cfg.type=="Fly" then
        self:exitStateType(Define.RoleStatus.SKILL_FLY_STATE)
    end
end