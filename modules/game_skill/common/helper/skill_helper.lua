---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2021/1/5 14:47
---
---@class SkillHelper
local SkillHelper = T(Lib, "SkillHelper")
---@type SkillConfig
local SkillConfig = T(Config, "SkillConfig")

---判断技能槽是否有可用的
local function isActiveSkillSlotAvailable(player)
    local equippedSkills = player:data(Define.VarKey.EquippedSkills)
    local skillPos
    for pos = 1, 4 do
        if equippedSkills[tostring(pos)] == nil then
            skillPos = tostring(pos)
            break
        end
    end
    return skillPos
end

---玩家登陆时同步玩家的装备信息
function SkillHelper:onPlayerLogin(player)
    local equippedSkills = player:data(Define.VarKey.EquippedSkills)
    player:sendPacket({
        pid = "onSyncPlayerSkills",
        skills = player:data(Define.VarKey.Skills),
        equippedSkills = equippedSkills
    })
    SkillHelper:onRestoreSkills(player, equippedSkills)
end

---初始化Entity已装备的技能
function SkillHelper:onRestoreSkills(entity, equippedSkills)
    for _, skillId in pairs(equippedSkills) do
        local skill = SkillConfig:getSkillConfig(skillId)
        if skill then
            ---技能动作
            if skill.upperAction then
                Plugins.CallPluginFunc("setDefaultUpperAction", entity, skill.upperAction)
            end
        end
    end
end

---玩家获得技能
---@param player Entity 玩家对象
---@param skillId number 技能ID
function SkillHelper:onPlayerGetSkill(player, skillId, autoEquip)
    if autoEquip == nil then
        autoEquip = true
    end
    local config = SkillConfig:getSkillConfig(skillId)
    if not config then
        return
    end
    local skills = player:data(Define.VarKey.Skills)
    table.insert(skills, skillId)
    if World.isClient then
        Lib.emitEvent(Event.EventGetSkill, skillId)
    else
        player:sendPacket({ pid = "onPlayerGetSkill", skillId = skillId })
    end
    if not autoEquip or World.isClient then
        return
    end
    ---技能槽如果可以装备的话要自动装备上去
    local skillPos = isActiveSkillSlotAvailable(player)
    if skillPos then
        SkillHelper:onPlayerEquippedSkill(player, nil, skillId)
    end
end

---删除玩家技能
---@param player Entity 玩家对象
---@param skillId number 技能ID
function SkillHelper:onPlayerDelSkill(player, skillId)
    local config = SkillConfig:getSkillConfig(skillId)
    if not config then
        return false
    end
    local isDel = false
    local skills = player:data(Define.VarKey.Skills)
    local list = skills or {}
    for pos, skill in pairs(skills) do
        if skill == skillId then
            table.remove(list, pos)
            isDel = true
            break
        end
    end
    local skillPos = "0"
    local isEquipped = false
    if not isDel then
        local equippedSkills = player:data(Define.VarKey.EquippedSkills)
        for pos, skill in pairs(equippedSkills) do
            if skill == skillId then
                skillPos = pos
                equippedSkills[pos] = nil
                isDel = true
                isEquipped = true
                break
            end
        end
    end
    if isDel then
        if World.isClient then
            Lib.emitEvent(Event.EventDeleteSkill, skillPos, skillId)
        else
            player:sendPacket({ pid = "onPlayerDelSkill", skillId = skillId })
            if isEquipped then
                if config.upperAction then
                    ---还原上半身动作
                    Plugins.CallPluginFunc("setDefaultUpperAction", player, "idle")
                end
                ---如果是正在装备中的技能，则自动装备当前最高战力的技能
                local autoEquipId = 0
                local maxFight = 0
                for _, _skillId in pairs(list) do
                    local skillConfig = SkillConfig:getSkillConfig(_skillId)
                    if skillConfig and skillConfig.fight > maxFight then
                        autoEquipId = _skillId
                        maxFight = skillConfig.fight
                    end
                end
                SkillHelper:onPlayerEquippedSkill(player, nil, autoEquipId)
            end
        end
    end
    return isDel
end

---玩家装备技能
---@param player Entity 玩家对象
---@param oldSkillId number 旧技能ID，可以为nil
---@param newSkillId number 新技能ID，卸下技能传0
function SkillHelper:onPlayerEquippedSkill(player, oldSkillId, newSkillId)
    local equippedSkills = player:data(Define.VarKey.EquippedSkills)
    local newSkillConfig = SkillConfig:getSkillConfig(newSkillId)
    if oldSkillId == newSkillId then
        return
    end
    local skillPos = -1
    if oldSkillId then
        ---卸下原来的技能
        for pos, skill in pairs(equippedSkills) do
            if skill == oldSkillId then
                equippedSkills[pos] = nil
                skillPos = pos
                if World.isClient then
                    Lib.emitEvent(Event.EventUpdateEquippedSkill, skillPos, 0)
                else
                    local oldSkillConfig = SkillConfig:getSkillConfig(oldSkillId)
                    if oldSkillConfig then
                        if oldSkillConfig.upperAction then
                            ---还原上半身动作
                            Plugins.CallPluginFunc("setDefaultUpperAction", player, "idle")
                        end
                    end
                    SkillHelper:onPlayerGetSkill(player, oldSkillId, false)
                end
                break
            end
        end
    end
    if not newSkillConfig then
        return
    end
    newSkillId = newSkillId or 0
    if skillPos == -1 then
        ---没有卸掉技能，找一个空技能槽来放
        ---不是平A技能，找出一个可以塞进去的卡位
        for pos = 1, 4 do
            if equippedSkills[tostring(pos)] == nil then
                skillPos = tostring(pos)
                break
            end
        end
    end
    if skillPos == -1 then
        ---没找到空技能槽
        return
    end
    local skills = player:data(Define.VarKey.Skills)
    local list = skills or {}
    for pos, skillId in pairs(list) do
        if skillId == newSkillId then
            table.remove(list, pos)
            equippedSkills[skillPos] = newSkillId
            if World.isClient then
                Lib.emitEvent(Event.EventUpdateEquippedSkill, skillPos, newSkillId)
            else
                player:sendPacket({ pid = "onPlayerEquippedSkill", oldSkillId = oldSkillId, newSkillId = newSkillId })
                ---设置穿戴后的上半身动作
                if newSkillConfig.upperAction then
                    Plugins.CallPluginFunc("setDefaultUpperAction", player, newSkillConfig.upperAction)
                end
            end
            break
        end
    end
end

---根据技能类型获取玩家技能配置
---@param player Entity 玩家对象
function SkillHelper:getPlayerSkills(player)
    local result = {}
    local skillIds = player:data(Define.VarKey.Skills) or {}
    for _, skillId in pairs(skillIds) do
        table.insert(result, SkillConfig:getSkillConfig(skillId))
    end
    return result
end

---删除玩家全部技能
---@param player Entity 玩家对象
function SkillHelper:delPlayerAllSkill(player)
    local skillList = player:data(Define.VarKey.Skills)
    for _, skills in pairs(skillList) do
        for _, skillId in pairs(skills) do
            SkillHelper:onPlayerDelSkill(player, skillId)
        end
    end
    player:setData(Define.VarKey.Skills, {})
    local equippedSkillList = player:data(Define.VarKey.EquippedSkills)

    for _, skillId in pairs(equippedSkillList) do
        SkillHelper:onPlayerDelSkill(player, skillId)
    end

    player:setData(Define.VarKey.EquippedSkills, Lib.copyTable1(World.cfg.initEquippedSkills))
    player:sendPacket({
        pid = "onSyncPlayerSkills",
        skills = {},
        equippedSkills = World.cfg.initEquippedSkills
    })
    SkillHelper:onRestoreSkills(player, World.cfg.initEquippedSkills)
end

local handles = T(Player, "PackageHandlers")

function handles:onPlayerEquippedSkill(packet)
    SkillHelper:onPlayerEquippedSkill(self, packet.oldSkillId, packet.newSkillId)
end

function handles:onPlayerDelSkill(packet)
    SkillHelper:onPlayerDelSkill(self, packet.skillId)
end

----------------------以下是客户端专用的方法----------------------
---同步装备信息
function handles:onSyncPlayerSkills(packet)
    Me:setData(Define.VarKey.Skills, packet.skills or {})
    Me:setData(Define.VarKey.EquippedSkills, packet.equippedSkills or {})
    Lib.emitEvent(Event.EventSyncPlayerSkill)
end

function handles:onPlayerGetSkill(packet)
    SkillHelper:onPlayerGetSkill(Me, packet.skillId)
end

---替换装备
---@param oldSkillId number 旧技能ID，可以为nil
---@param newSkillId number 新技能ID
function SkillHelper:changeEquippedSkill(oldSkillId, newSkillId)
    Me:sendPacket({ pid = "onPlayerEquippedSkill", oldSkillId = oldSkillId, newSkillId = newSkillId })
end