---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/12/30 14:31
---
---@class SkillConfig
local SkillConfig = T(Config, "SkillConfig")

local SkillMap = {}

function SkillConfig:init()
    local config = Lib.read_csv_file(Root.Instance():getGamePath() .. "config/skill.csv", 2)
    for _, vConfig in pairs(config) do
        if vConfig.skillId ~= "" then
            local buffs = nil
            if vConfig.skillEffects and vConfig.skillEffects ~= "" then
                buffs = Lib.splitString(vConfig.skillEffects, "#", true)
            end
            ---@class SkillConfigData
            local data = {}
            data.id = tonumber(vConfig.id) or 0
            data.skillId = tonumber(vConfig.skillId) or 0
            data.skillCd = tonumber(vConfig.skillCd) or 0
            data.sprintRecoverCD = tonumber(vConfig.sprintRecoverCD) or 0
            data.mpCost = tonumber(vConfig.mpCost) or 0
            data.skillMode = tonumber(vConfig.skillMode) or 1
            data.image = vConfig.image or ""
            data.desc = vConfig.desc or ""
            data.name = vConfig.name or ""
            data.isEngineSkill=tonumber(vConfig.isEngineSkill) and tonumber(vConfig.isEngineSkill)==1
            data.skillMoves=Lib.splitString(vConfig.skillMoves or "", "#", true)
            data.skillTimes=Lib.splitString(vConfig.skillTimes or "", "#", true)
            data.skillBurstTimes=Lib.splitString(vConfig.skillTimes or "", "#", true)
            data.fightCountSkill = tonumber(vConfig.n_fightCountSkill) or 0
            --data.hitBuff = vConfig.hitBuff ~= "#" and vConfig.hitBuff or nil
            --data.upperAction = vConfig.upperAction ~= "#" and vConfig.upperAction or nil
            --data.buffs = buffs

            --data.buffList = Lib.splitString(vConfig.buffList or "", "#", true)
            SkillMap[vConfig.skillId] = data
        end
    end
end

function SkillConfig:getSkillMoveTime(skillId,index)
    if index then
        local cfg=self:getSkillConfig(skillId)
        if cfg then
            return cfg.skillTimes[2*index-1],cfg.skillTimes[2*index]
        end
    end
end

---@return SkillConfigData
function SkillConfig:getSkillConfig(skillId)
    skillId = tostring(skillId)
    if not SkillMap[skillId] then
        --Lib.logError("Error:Not found the data in skill.csv, skill id:", skillId)
    end
    return SkillMap[skillId]
end

function SkillConfig:getAllSkillConfig()
    return SkillMap
end

SkillConfig:init()

return SkillConfig