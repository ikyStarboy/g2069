---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/4/10 20:52
---


---@type CastStrategyBase
local CastStrategyBase = require "client.cast_helper.cast_strategy_base"
---@class CastStrategySwitch
local CastStrategySwitch = Lib.class("CastStrategySwitch","CastStrategyBase")
---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")
---@type SkillConfig
local SkillConfig = T(Config, "SkillConfig")
---@type GameSkillHelper
local GameSkillHelper = T(Lib, "GameSkillHelper")

function CastStrategySwitch:ctor()
    self.skillOpenList = {}
end

function CastStrategySwitch:onTouchDown(skillId)
    CastStrategyBase.onTouchDown(self,skillId)
    --print("-------------------CastStrategySwitch:onTouchDown",skillId)
end

function CastStrategySwitch:onTouchUp(skillId)
    CastStrategyBase.onTouchUp(self,skillId)
    --print("-------------------CastStrategySwitch:onTouchUp",skillId)
end

function CastStrategySwitch:onTouchClick(skillId)
    CastStrategyBase.onTouchClick(self,skillId)
    --print("-------------------CastStrategySwitch:onTouchClick",skillId)
    self:updateSkillSwitchState(skillId)
end

function CastStrategySwitch:cleanALlSkillState()
    for skillId, _ in pairs(self.skillOpenList) do
        self:updateSkillBuff(skillId, false)
    end
    self.skillOpenList = {}
    self:stopSwitchTimer()
end

function CastStrategySwitch:cleanALlSkillStateAndCD(exCD)
    for skillId, _ in pairs(self.skillOpenList) do
        Lib.emitEvent(Event.EVENT_SWITCH_SKILL_UPDATE, skillId, false,exCD)
    end
   self:cleanALlSkillState()
end

function CastStrategySwitch:updateSkillSwitchState(skillId)
    if not Me:checkCanFreeSkillMove() then
        return
    end
    if not self.skillOpenList[skillId] then
        local canFree, skillCd = Me:checkCanFreeSkill(skillId)
        if not canFree then
            return
        end
    end

    if self.skillOpenList[skillId] then
        self.skillOpenList[skillId] = nil
        self:updateSkillBuff(skillId, false)
    else
        self.skillOpenList[skillId] = true
        local config = SkillConfig:getSkillConfig(skillId)
        Me:requestCostMp(skillId)
        self:updateSkillBuff(skillId, true)
        self:castMoveSkill(skillId)
    end
    Lib.emitEvent(Event.EVENT_SWITCH_SKILL_UPDATE, skillId, self.skillOpenList[skillId])
    self:updateSwitchTimer()
end

function CastStrategySwitch:updateSwitchTimer()
    local needVal = 0
    for skillId, val in pairs(self.skillOpenList) do
        needVal = needVal + 1
    end
    if needVal > 0 then
        if not self.switchTimer then
            self:startSwitchTimer()
        end
    else
        self:stopSwitchTimer()
    end
end

function CastStrategySwitch:startSwitchTimer()
    self.switchTimer = World.Timer(20,function()
        local needVal = 0
        local curMp = Me:getCurMp()
        local needSkillList = {}
        for skillId, val in pairs(self.skillOpenList) do
            local config = SkillConfig:getSkillConfig(skillId)
            if curMp >= needVal + config.mpCost then
                needVal = needVal + config.mpCost
                table.insert(needSkillList, skillId)
            else
                self.skillOpenList[skillId] = nil
                Lib.emitEvent(Event.EVENT_SWITCH_SKILL_UPDATE, skillId, false)
                self:updateSkillBuff(skillId, false)
            end
        end
        if needVal > 0 then
            Me:requestCostMp(needSkillList)
        else
            self:stopSwitchTimer()
            return false
        end
        return true
    end)
end

function CastStrategySwitch:updateSkillBuff(skillId, isAdd)
    Me:requestUpdateSkillBuff(CastStrategyBase.getFirstMove(self,skillId), isAdd)
end

function CastStrategySwitch:stopSwitchTimer()
    if self.switchTimer then
        self.switchTimer()
        self.switchTimer=nil
    end
end

function CastStrategySwitch:clear()
    self:stopSwitchTimer()
    self.skillOpenList = {}
end

function CastStrategySwitch:castMoveSkill(skillId)
    --print("===================================== CastStrategySwitch:castMoveSkill",moveSkill,skillId)
    local config = SkillMovesConfig:getNewSkillConfig(CastStrategyBase.getFirstMove(self,skillId))
    if config and config.skillName then
        Skill.Cast(config.skillName,{skillId=skillId})
    end
end


return CastStrategySwitch
