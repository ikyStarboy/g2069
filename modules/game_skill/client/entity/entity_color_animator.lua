---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/9/13 10:56
---


---@class EntityColorAnimator
local EntityColorAnimator = T(Lib, "EntityColorAnimator")

function EntityColorAnimator:init()

    if self.initialized then
        return
    end

    self.animators = {}
    self.entityIdToAnimatorIdDict = {}
    self.nextAnimatorId = 1

    self.renderTickListener = Lib.subscribeEvent(Event.EVENT_HANDLE_RENDER_TICK_CLIENT, function(frameTime)
        self:onRenderTick(frameTime)
    end)
    self.initialized = true
end

function EntityColorAnimator:onRenderTick(frameTime)
    self:updateAll(frameTime)
end

function EntityColorAnimator:getNextAnimatorId()
    local id = self.nextAnimatorId
    self.nextAnimatorId = self.nextAnimatorId + 1
    return id
end

function EntityColorAnimator:lerpColor(color1, color2, time1, time2, curTime)
    local duration = time2 - time1
    local pastTime = curTime - time1
    local ratio1 = pastTime / duration
    local ratio2 = 1 - ratio1
    return {
        color2[1] * ratio1 + color1[1] * ratio2,
        color2[2] * ratio1 + color1[2] * ratio2,
        color2[3] * ratio1 + color1[3] * ratio2,
    }
end

function EntityColorAnimator:updateAnimator(frameTime, animator)
    local timeline = animator.timeline
    local index = animator.curKeyFrameIndex
    if index >= #timeline then
        return
    end
    animator.curTime = animator.curTime + frameTime
    local curTime = animator.curTime
    local curKeyFrame = timeline[index]
    local nextKeyFrame = timeline[index + 1]
    local originalColor = animator.originalColor

    while nextKeyFrame and curTime >= nextKeyFrame.time do
        index = index + 1
        curKeyFrame = timeline[index]
        nextKeyFrame = timeline[index + 1]
    end

    local color
    if index < #timeline then
        color = self:lerpColor(curKeyFrame.color, nextKeyFrame.color, curKeyFrame.time, nextKeyFrame.time, curTime)
        color[1], color[2], color[3] = color[1] * originalColor[1], color[2] * originalColor[2], color[3] * originalColor[3]
    else
        color = animator.originalColor
        animator.shouldRemove = true
    end
    local targetEntity = World.CurWorld:getObject(animator.targetObjId)
    if targetEntity and targetEntity:isValid() then
        targetEntity:setNaturalColor(color)
    end
end

function EntityColorAnimator:updateAll(frameTime)
    local removeList = {}
    for id, animator in pairs(self.animators) do
        if animator then
            self:updateAnimator(frameTime, animator)
            if animator.shouldRemove then
                removeList[#removeList] = id
            end
        end
    end
    for _, id in pairs(removeList) do
        self:stopAnimationWithAnimatorId(id)
    end
end

function EntityColorAnimator:playAnimation(entity, timeline)
    if not entity or not entity:isValid() or entity.getNaturalColor == nil then
        return
    end
    if #timeline == 0 or timeline[#timeline].time <= 0 then
        return 0
    end
    self:stopAnimation(entity)

    local currentColor = entity:getNaturalColor()
    if timeline[1].time > 0 then
        table.insert(timeline, 1, { time = 0, color = { 1, 1, 1 } })
    else
        local changeColor = timeline[1].color
        entity:setNaturalColor({
            currentColor[1] * changeColor[1],
            currentColor[2] * changeColor[2],
            currentColor[3] * changeColor[3],
        })
    end
    local id = self:getNextAnimatorId()
    local newAnimator = {
        id = id,
        curTime = 0,
        curKeyFrameIndex = 1,
        targetObjId = entity.objID,
        timeline = timeline,
        originalColor = currentColor
    }
    self.animators[id] = newAnimator
    self.entityIdToAnimatorIdDict[entity.objID] = id
    return newAnimator
end

function EntityColorAnimator:stopAnimation(entity)
    if not entity or not entity:isValid() then
        return
    end

    local animatorId = self.entityIdToAnimatorIdDict[entity.objID]
    self:stopAnimationWithAnimatorId(animatorId)
end

function EntityColorAnimator:stopAnimationWithAnimatorId(id)
    if not id then
        return
    end
    local animator = self.animators[id]
    if animator then
        local targetEntity = World.CurWorld:getObject(animator.targetObjId)
        if targetEntity and targetEntity:isValid() then
            targetEntity:setNaturalColor(animator.originalColor)
        end
        self.animators[id] = nil
        self.entityIdToAnimatorIdDict[animator.targetObjId] = nil
    end
end

EntityColorAnimator:init()