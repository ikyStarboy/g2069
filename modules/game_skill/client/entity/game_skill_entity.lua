---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 10184.
--- DateTime: 2020/12/25 12:31
---
---@type GameSkillHelper
local GameSkillHelper = T(Lib, "GameSkillHelper")

---@type SkillMovesConfig
local SkillMovesConfig = T(Config, "SkillMovesConfig")

---@type EntityClient
local Entity = Entity
local ValueFunc = T(Entity, "ValueFunc")
local EntityClient = EntityClient

---@type HurtColorTimelineConfig
local HurtColorTimelineConfig = T(Config, "HurtColorTimelineConfig")
---@type EntityColorAnimator
local EntityColorAnimator = T(Lib, "EntityColorAnimator")

---@param entity Entity
ValueFunc["defaultUpperAction"] = function(entity, _)
    GameSkillHelper:tryPlayDefaultUpperAction(entity, true)
end

---@param entity Entity
ValueFunc["chargeState"] = function(entity, value)
    --print("---------------------- ValueFunc[\"chargeState\"] ",Lib.v2s(value))
    ---@type chargeStateData
    local data=value
    if data.isCharging then
        entity:enterStateType(Define.RoleStatus.SKILL_CHARGE_STATE,data.skillId,data.skillMoveId)
    else
        entity:exitStateType(Define.RoleStatus.SKILL_CHARGE_STATE)
    end
end

---@param entity Entity
ValueFunc["flyState"] = function(entity, value)
    --print("---------------------- ValueFunc[\"flyState\"] ",value)
    local fly=value.fly
    local skillMoveId=value.skillMoveId
    if fly==1 then
        entity:enterStateType(Define.RoleStatus.SKILL_FLY_STATE,skillMoveId)
    else
        entity:exitStateType(Define.RoleStatus.SKILL_FLY_STATE)
    end
end

---@param entity Entity
ValueFunc["dragState"] = function(entity, value)
    --print("---------------------- ValueFunc[\"dragState\"] ",value)
    if value==1 then
        entity:enterStateType(Define.RoleStatus.DRAG)
    else
        entity:exitStateType(Define.RoleStatus.DRAG)
    end
end

-----@param entity Entity
--ValueFunc["playerBeBlowAway"] = function(entity, value)
--    print("---------------------- ValueFunc[\"playerBeBlowAway\"] ",entity.objID,value)
--end

function EntityClient:playColorAnimation(timelinePath)
    local timelineCfg = HurtColorTimelineConfig:getCfg("myplugin/" .. timelinePath)
    if not timelineCfg then
        return
    end
    local timeline = timelineCfg.timeline
    if not timeline then
        return
    end
    EntityColorAnimator:playAnimation(self, timeline)
end

function EntityClient:stopColorAnimation()
    EntityColorAnimator:stopAnimation(self)
end

function EntityClient:canNotBreakAction()
    return self:isInStateType(Define.RoleStatus.SKILL_ACTION_STATE)
        or self:isInStateType(Define.RoleStatus.SKILL_CHARGE_STATE)
end

function EntityClient:addSkillChildActor(childActorName,pos,scale)
    if not childActorName or not pos or next(pos) == nil then
        return
    end
    local slave = {
        actor = childActorName,
        parentPoint = {
            position = Lib.v3(0,0,0),
            propagateScaling = true,
            alignWorldYAxis = false,
            matchActorOrientation = false,
            scale=scale or 1
        },
        childPoint = {
            position = pos,
            propagateScaling = true,
            alignWorldYAxis = false,
            matchActorOrientation = false,
            scale=1
        }
    }
    self:addChildActor(childActorName, slave)
end






