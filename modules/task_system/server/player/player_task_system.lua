---
--- Generated by PluginCreator
--- task_system player
--- DateTime:2023-03-23
---

local Player = Player
---@type TaskSystemHelper
local TaskSystemHelper = T(Lib, "TaskSystemHelper")
---@type TaskConfig
local TaskConfig = T(Config, "TaskConfig")
---@type GrowthSystem
local GrowthSystem = T(Lib, "GrowthSystem")
---@type WalletSystem
local WalletSystem = T(Lib, "WalletSystem")
---@type RewardHelper
local RewardHelper = T(Lib, "RewardHelper")

function Player:checkUpdateTaskData(conditionKey, params)
    if conditionKey == Define.TargetConditionKey.KILL then
        TaskSystemHelper:updateTaskKillCondition(self, conditionKey, params)
    end
    TaskSystemHelper:checkUpdateTaskCondition(self, conditionKey, params)
end

-- 接取任务
function Player:receiveOneTask(taskId, isForce, params)
    if isForce or TaskSystemHelper:checkIsCanReceiveTask(self, taskId, params) then
        local taskConfig = TaskConfig:getCfgById(taskId)
        if taskConfig and taskConfig.taskType == Define.TaskType.Main then
            local mainTask = self:getMainTask()
            mainTask[taskId] = TaskSystemHelper:createOneTaskData(taskId)
            self:setMainTask(mainTask)
            if TaskSystemHelper:checkTaskIsComplete(self, taskId) then
                self:completeOneTask(taskId)
            end
        elseif taskConfig and taskConfig.taskType == Define.TaskType.Branch then
            local branchTask = self:getBranchTask()
            local preTime = os.time()
            local taskNum = 0
            local preTask
            for _, taskData in pairs(branchTask) do
                if preTime < taskData.receiveTime then
                    preTime = taskData.receiveTime
                    preTask = taskData.taskId
                end
                taskNum = taskNum + 1
            end
            if taskNum >= World.cfg.task_systemSetting.maxBranchNum and preTask then
                branchTask[preTask] = nil
                local defaultData = {
                    task_id_alias = preTask,
                    task_change_type = "discard",
                    discard_type = "replace"
                }
                Plugins.CallTargetPluginFunc("report", "report", "g2069_task_change", defaultData, self)
            end
            if branchTask[taskId] then
                local defaultData = {
                    task_id_alias = taskId,
                    task_change_type = "discard",
                    discard_type = "replace"
                }
                Plugins.CallTargetPluginFunc("report", "report", "g2069_task_change", defaultData, self)
            end
            branchTask[taskId] = TaskSystemHelper:createOneTaskData(taskId)
            self:setBranchTask(branchTask)
            if TaskSystemHelper:checkTaskIsComplete(self, taskId) then
                self:completeOneTask(taskId)
            end
        end

        self:sendPacket({
            pid = "PushShowTaskReceiveTips",
            taskId = taskId
        })

        local defaultData = {
            task_id_alias = taskId,
            task_change_type = "accept",
            discard_type = "replace"
        }
        Plugins.CallTargetPluginFunc("report", "report", "g2069_task_change", defaultData, self)
        return true
    end
    return false
end

-- 完成任务
function Player:completeOneTask(taskId)
    local mainTask = self:getMainTask()
    if mainTask[taskId] then
        self:addCompleteTask(taskId)
        self:setMainTask({})
    else
        local branchTask = self:getBranchTask()
        branchTask[taskId] = nil
        self:setBranchTask(branchTask)
        self:addCompleteTask(taskId)
    end
    RewardHelper:gainTaskRewards(self, taskId)

    self:sendPacket({
        pid = "PushShowTaskCompleteTips",
        taskId = taskId
    })

    World.Timer(2, function()
        if self and self:isValid() then
            local nextTask = TaskConfig:getNextTaskById(taskId)
            if nextTask then
                for _, nextId in pairs(nextTask) do
                    local nextTaskConfig = TaskConfig:getCfgById(nextId)
                    if nextTaskConfig.autoIssue then
                        self:receiveOneTask(nextId)
                    end
                end
            end
            self:checkUpdateTaskData(Define.TargetConditionKey.TASK)
        end
    end)

    local defaultData = {
        task_id_alias = taskId,
        task_change_type = "finish",
        discard_type = ""
    }
    Plugins.CallTargetPluginFunc("report", "report", "g2069_task_change", defaultData, self)
end

-- 放弃任务
function Player:giveUpOneTask(taskId, isForce)
    local taskCfg = TaskConfig:getCfgById(taskId)
    if not taskCfg.canGiveUp and not isForce then
        return
    end

    local mainTask = self:getMainTask()
    if mainTask[taskId] then
        mainTask[taskId] = nil
        self:setMainTask(mainTask)
    else
        local branchTask = self:getBranchTask()
        branchTask[taskId] = nil
        self:setBranchTask(branchTask)
    end
    local defaultData = {
        task_id_alias = taskId,
        task_change_type = "discard",
        discard_type = "discard"
    }
    Plugins.CallTargetPluginFunc("report", "report", "g2069_task_change", defaultData, self)
end