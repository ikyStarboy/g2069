---
--- Generated by PluginCreator
--- task_system player
--- DateTime:2023-03-23
---

local Player = Player
---@type TaskConfig
local TaskConfig = T(Config, "TaskConfig")
---@type GrowthSystem
local GrowthSystem = T(Lib, "GrowthSystem")
---@type AbilitySystem
local AbilitySystem = T(Lib, "AbilitySystem")
---@type InventorySystem
local InventorySystem = T(Lib, "InventorySystem")
---@type ItemConfig
local ItemConfig = T(Config, "ItemConfig")

function Player:getTaskProgressShow(data)
    local taskConfig = TaskConfig:getCfgById(data.taskId)
    local progressText = ""
    for conditionKey, list in pairs(taskConfig.taskCompleteCondition) do
        for _, condition in pairs(list) do
            if conditionKey == Define.TargetConditionKey.LEVEL then
                local curLevel = GrowthSystem:getLevel(Me)
                local needLevel = condition.minLevel or condition.maxLevel
                if needLevel then
                    progressText = curLevel .. "/" .. needLevel
                else
                    progressText = curLevel
                end
            elseif conditionKey == Define.TargetConditionKey.NPC then
                progressText = "0/1"
            elseif conditionKey == Define.TargetConditionKey.LOCATION then
                progressText = "0/1"
            elseif conditionKey == Define.TargetConditionKey.TASK then
                progressText = "0/1"
            elseif conditionKey == Define.TargetConditionKey.MISSION then
                progressText = "0/1"
            elseif conditionKey == Define.TargetConditionKey.ITEM then
                for index, val in pairs(taskConfig.taskCompleteCondition[conditionKey]) do
                    local ownCounts = InventorySystem:getItemAmountByItemAlias(Me, Define.INVENTORY_TYPE.ABILITY, val.item_alias)
                    if ownCounts > val.needCounts then
                        progressText = ownCounts .. "/" .. val.needCounts
                    else
                        progressText = ownCounts .. "/" .. val.needCounts
                    end
                end
            elseif conditionKey == Define.TargetConditionKey.KILL then
                local mainTask = Me:getMainTask()
                if mainTask[data.taskId] then
                    if mainTask[data.taskId].taskCompleteCondition[conditionKey] then
                        for index, val in pairs(mainTask[data.taskId].taskCompleteCondition[conditionKey]) do
                            if val.killCounts > val.needKills then
                                progressText =  val.needKills .. "/" .. val.needKills
                            else
                                progressText =  val.killCounts .. "/" .. val.needKills
                            end
                        end
                    end
                end

                local branchTask = Me:getBranchTask()
                if branchTask[data.taskId] then
                    if branchTask[data.taskId].taskCompleteCondition[conditionKey] then
                        for index, val in pairs(branchTask[data.taskId].taskCompleteCondition[conditionKey]) do
                            if val.killCounts > val.needKills then
                                progressText =  val.needKills .. "/" .. val.needKills
                            else
                                progressText =  val.killCounts .. "/" .. val.needKills
                            end
                        end
                    end
                end
            elseif conditionKey == Define.TargetConditionKey.ABILITY then
                local abilityList = AbilitySystem:getAbilityListByAbilityId(Me, condition.abilityId) or {}
                local maxLevel = 0
                ---@type number, Ability
                for _, ability in pairs(abilityList) do
                    local level = ability:getLevel()
                    if level > maxLevel then
                        maxLevel = level
                    end
                end
                local needLevel = condition.minLevel or condition.maxLevel
                if needLevel then
                    progressText = maxLevel .. "/" .. needLevel
                else
                    progressText = maxLevel
                end
            end
        end
    end
    return progressText
end

function Player:getTaskOpenConditionText(taskId)
    local taskConfig = TaskConfig:getCfgById(taskId)
    local progressText = ""
    for conditionKey, list in pairs(taskConfig.taskCondition) do
        for _, condition in pairs(list) do
            if conditionKey == Define.TargetConditionKey.LEVEL then
                local needLevel = condition.minLevel or condition.maxLevel
                local condition = Lang:toText({ "g2069_task_open_level_tips", needLevel })
                if progressText ~= "" then
                    progressText = progressText .. ","
                end
                progressText = progressText .. condition
            end
        end
    end
    return progressText
end

function Player:getRewardListText(rewards)
    local result = ""
    for _, data in pairs(rewards or {}) do
        local item_num = data.item_num
        local itemCfg = ItemConfig:getCfgByItemAlias(data.item_alias)
        local itemName = Lang:toText(itemCfg.name)
        if result ~= "" then
            result = result .. ","
        end
        result = result .. itemName .. "X" .. item_num
    end
    return result
end

-- 是否需要关闭新手村传送阵,true 需要
function Player:isNeedCloseNoviceMapTeleport()
    local completeTask = self:getCompleteTask() or {}
    local mainTask = self:getMainTask() or {}
    if completeTask[World.cfg.task_systemSetting.closeMuYeTask] or
            completeTask[World.cfg.task_systemSetting.closeWindTask] or
            mainTask[World.cfg.task_systemSetting.closeMuYeTask] or
            mainTask[World.cfg.task_systemSetting.closeWindTask] then
        return true
    end
    return false
end
