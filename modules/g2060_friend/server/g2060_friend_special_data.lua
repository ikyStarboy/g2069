---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/7/11 15:30
---

local FriendSpecialData = T(Lib, "FriendSpecialData")

function FriendSpecialData:init()
    self.dataDict = {}
    self.refreshTime = 60
end

function FriendSpecialData:getSpecialData(userIds, callbackPlayerId, callback, immediately)
    local needRequestUserIds = {}
    local cacheUserIds = {}
    for i, userId in pairs(userIds) do
        if immediately or self:isNeedRequest(userId) then
            table.insert(needRequestUserIds, userId)
        else
            table.insert(cacheUserIds, userId)
        end
    end
    if #needRequestUserIds > 0 then
        AsyncProcess.G2060GetPlayerGameSpecialData(needRequestUserIds, function(data)
            self:saveSpecialData(data)
            if callback then
                local dataList = self:getLocalPlayerSpecialDataList(userIds)
                callback(dataList)
            end
            if callbackPlayerId then
                self:syncPlayerSpecialData(userIds, callbackPlayerId)
            end
        end)
    else
        if callback then
            local dataList = self:getLocalPlayerSpecialDataList(userIds)
            callback(dataList)
        end
        if callbackPlayerId then
            self:syncPlayerSpecialData(userIds, callbackPlayerId)
        end
    end
end

function FriendSpecialData:isNeedRequest(userId)
    local data = self.dataDict[userId]
    if not data then
        return true
    else
        if os.time() - data.lastTime >= self.refreshTime then
            return true
        end
    end
    return false
end

function FriendSpecialData:saveSpecialData(dataList)
    if not dataList then
        return
    end
    for _, v in pairs(dataList) do
        self.dataDict[v.userId] = {
            lastTime = os.time(),
            specialData =  v.data or {}
        }
    end
end

function FriendSpecialData:getLocalPlayerSpecialDataList(userIds)
    local specialDataList = {}
    for _, userId in pairs(userIds) do
        local data = self.dataDict[userId]
        if data then
            table.insert(specialDataList, {
                userId = userId,
                specialData = data.specialData
            })
        end
    end
    return specialDataList
end

function FriendSpecialData:syncPlayerSpecialData(userIds, callbackPlayerId)
    local specialDataList = self:getLocalPlayerSpecialDataList(userIds)
    local player = Game.GetPlayerByUserId(callbackPlayerId)
    if player and player:isValid() then
        player:sendPacket({
            pid = "S2CPlayerSpecialData",
            specialDataList = specialDataList
        })
    end
end

function FriendSpecialData:setDataVal(userId, oldData, newData, needUpload)
    local isDirty = false
    for key, val in pairs(newData) do
        local oldVal = oldData[key]
        if oldVal ~= val then
            isDirty = true
            oldData[key] = val
        end
    end
    if isDirty then
        if needUpload then
            --Lib.logWarning("G2060SavePlayerGameSpecialData 1312313 ", userId, oldData.gameStatus)
            AsyncProcess.G2060SavePlayerGameSpecialData(userId, oldData)
        end
    end
end

function FriendSpecialData:setPlayerSpecialData(userId, newData, needUpload)
    local data = self.dataDict[userId]
    if not data then
        self:getSpecialData({userId}, nil, function()
            data = self.dataDict[userId]
            data.lastTime = os.time()
            self:setDataVal(userId, data.specialData, newData, needUpload)
        end)
    else
        self:setDataVal(userId, data.specialData, newData, needUpload)
    end
end

FriendSpecialData:init()

return FriendSpecialData