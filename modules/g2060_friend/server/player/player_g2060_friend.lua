---
--- Generated by PluginCreator
--- g2060_friend player
--- DateTime:2022-07-07
---
local LuaTimer = T(Lib, "LuaTimer") ---@type LuaTimer
local PlayerDBMgr = T(Lib, "PlayerDBMgr") ---@type PlayerDBMgr
local Player = Player

function Player:onPlayerFollow(packet)
    if not self:isFollowCdFinish() then
        return
    end
    self:setLastFollowTime()
    local targetUserId = tonumber(packet.targetUserId)
    Lib.FriendSpecialData:getSpecialData({targetUserId}, nil, function(dataList)
        local specialData = dataList[1].specialData
        if specialData then
            if specialData.privacyStatus then
                self:sendPacket({
                    pid = "ShowGameTopTips",
                    text = "g2060_friend_follow_fail_by_privacy"
                })
                self:clearLastFollowTime()
                return
            elseif specialData.gameStatus ~= Define.FriendGameStatus.Hall then
                self:sendPacket({
                    pid = "ShowGameTopTips",
                    text = "g2060_friend_follow_fail"
                })
                return
            end
        end
        local data = {
            target_user = targetUserId,
            act_type = 2,
            game_type = specialData.gameStatus
        }
        Plugins.CallTargetPluginFunc("report", "report", "game_play_with", data, self)
        self:sendPacket({
            pid = "S2CShowFollowTips",
            targetUserId = packet.targetUserId
        })
        local content = packet.content or {}
        local target = Game.GetPlayerByUserId(targetUserId)
        self:cancelSkateByServer()
        if not target and packet.crossServer then
            content.followUserId = targetUserId
            self:playerOnFollowOtherServer(targetUserId, content)
            return
        end
        self:playerFollowSameServer(target, content)
    end, true)
end

function Player:playerOnFollowOtherServer(targetUserId, followData)
    self:setFollowData(followData)
    PlayerDBMgr.onSaveLoginDBData(self, function()
        self.visitCrossServerTimer = LuaTimer:scheduleTimer(function()
            if self and self:isValid() then
                ---跳出
                Lib.logInfo("try follow other, out server", self.platformUserId, targetUserId)
                self:sendGotoOtherGame(targetUserId, World.GameName, "")
            end
        end, 500, 1)
    end)
end

function Player:playerFollowSameServer(targetPlayer, content)
    if not targetPlayer then
        return
    end

    local entity = World.CurWorld:getEntity(targetPlayer.objID)
    if not entity or not entity:isValid() then
        return
    end
    local pos = entity:getPosition()
    self:setMapPos(entity.map, pos)
    targetPlayer:sendPacket({
        pid = "ShowGameTopTips",
        text = "g2060_friend_follow_arrive_tips",
        args = {targetPlayer.name}
    })

    local data = {
        pid = "SendChatMsgToClient",
        msgData = {
            fromName = self.name,
            msg = targetPlayer.name,
            msgType = Define.MsgType.FollowHello,
            objID = self.objID,
            pageType = Define.ChatPage.World,
            fromId = self.platformUserId
        }
    }
    self:sendChatMsg(data)
end

function Player:getGameStatus()
    local mapName = self.map.name
    local game_mode  = Game.GetGameMode()
    if not game_mode or game_mode == "" then
        if mapName == "map001" then
            return Define.FriendGameStatus.Hall
        else
            return Define.FriendGameStatus.Other
        end
    else
        return Define.FriendGameStatus.PartyGame
    end
end

function Player:checkFollowTarget()
    local followData = self:getFollowData()
    if followData.followUserId then
        Lib.logInfo("try follow player", self.platformUserId, followData.followUserId)
        local targetPlayer = Game.GetPlayerByUserId(followData.followUserId)
        if targetPlayer and targetPlayer:isValid() then
            self:playerFollowSameServer(targetPlayer, followData)
        end
        self:setFollowData({})
    end
end