---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2023/3/29 18:07
---

---@class NpcSystemHelper
local NpcSystemHelper = T(Lib, "NpcSystemHelper")
---@type NpcConfig
local NpcConfig = T(Config, "NpcConfig")
---@type NpcDialogueReplyConfig
local NpcDialogueReplyConfig = T(Config, "NpcDialogueReplyConfig")
---@type NpcDialogueConfig
local NpcDialogueConfig = T(Config, "NpcDialogueConfig")
---@type TargetConditionHelper
local TargetConditionHelper = T(Lib, "TargetConditionHelper")
---@type GameTimes
local GameTimes = T(Lib, "GameTimes")

function NpcSystemHelper:init()
    self.npcInitYaw = {}
    self.timeNpcList = {}
    self:initEvent()
end

function NpcSystemHelper:initEvent()
    Lib.subscribeEvent(Event.EVENT_ENTITY_SPAWN, function(objID)
        local entity = World.CurWorld:getEntity(objID)
        if not entity or not entity:isValid() then
            return
        end
        if not entity:isNPC() then
            return
        end

        local npcId = entity.name
        local npcConfig = NpcConfig:getCfgById(npcId)
        if not npcConfig then
            return
        end

        if not npcConfig.npcShowTime then
            return
        end

        self.timeNpcList[objID] = {
            npcShowTime = npcConfig.npcShowTime,
            objID = objID
        }
        self:updateNpcTimeShow()
    end)

    Lib.subscribeEvent(Event.EVENT_OBJECT_INTERACTION_CHECKIN, function(objID, isCheckIn)
        local entity = World.CurWorld:getEntity(objID)
        if not entity or not entity:isValid() then
            return
        end
        if not entity:isNPC() then
            return
        end

        if not entity.isVisible then
            return
        end

        local npcId = entity.name
        local npcConfig = NpcConfig:getCfgById(npcId)
        if not npcConfig then
            return
        end
        if npcConfig.dialogGroupID <= 0 then
            return
        end
        if not self.npcInitYaw[objID] then
            self.npcInitYaw[objID] = entity:getBodyYaw()
        end
        if isCheckIn then
            local npcPos = entity:getPosition()
            local myPos = Me:getPosition()
            entity:setBodyYaw(Lib.v3AngleXZ(Lib.v3cut(myPos, npcPos)))
            self:jumpToNpcDialog(npcId, nil, "region")
        else
            entity:setBodyYaw(self.npcInitYaw[objID] or 0)
            Lib.emitEvent(Event.EVENT_UPDATE_NPC_DIALOG_CLOSE, npcId, "region")
        end
    end)
end

function NpcSystemHelper:updateNpcTimeShow()
    if not self.timeNpcList then
        return
    end

    local tbTime = GameTimes:GetTime()
    for objID, val in pairs(self.timeNpcList) do
        local entity = World.CurWorld:getEntity(objID)
        if not entity or not entity:isValid() then
            self.timeNpcList[objID] = nil
        else
            local curTime = tbTime.hour*60 + tbTime.min
            local needShow = false
            for _, oneTime in pairs(val.npcShowTime) do
                local startTime = oneTime.startTime[1]*60 + oneTime.startTime[2]
                local endTime = oneTime.endTime[1]*60 + oneTime.endTime[2]
                if (curTime >= startTime) and (curTime <= endTime) then
                    needShow = true
                end
            end
            if needShow then
                if not entity.isVisible then
                    entity.isVisible = true
                end
            else
                if entity.isVisible then
                    entity.isVisible = false
                    local npcId = entity.name
                    Lib.emitEvent(Event.EVENT_UPDATE_NPC_DIALOG_CLOSE, npcId, "region")
                end
            end
        end
    end
end

function NpcSystemHelper:jumpToNpcDialog(npcId, dialogId, source)
    if not npcId then
        Lib.emitEvent(Event.EVENT_UPDATE_NPC_DIALOG_CLOSE)
        return
    end
    local npcWnd = UI:isOpenWindow("UI/npc_dialog/gui/win_npc_dialog")
    if npcWnd then
        npcWnd:initView(npcId, dialogId, source)
    else
        UI:openWindow("UI/npc_dialog/gui/win_npc_dialog", nil, nil, npcId, dialogId, source)
    end
end

function NpcSystemHelper:getCanShowDialogList(npcId)
    local npcConfig = NpcConfig:getCfgById(npcId)
    local dialogList = NpcDialogueConfig:getCfgByGroupId(npcConfig.dialogGroupID)
    local result = {}
    for _, dialogConfig in ipairs(dialogList) do
        local canShow = true
        for conditionKey, list in pairs(dialogConfig.openCondition) do
            for _, condition in pairs(list) do
                if not TargetConditionHelper[conditionKey](condition, Me) then
                    canShow = false
                    break
                end
            end
            if not canShow then
                break
            end
        end
        if dialogConfig.dialogueTimes > 0 then
            local dialogCounts = Me:getOneDialogRecord(npcId, dialogConfig.dialogId)
            if dialogCounts >= dialogConfig.dialogueTimes then
                canShow = false
            end
        end
        if canShow then
            table.insert(result, dialogConfig.dialogId)
        end
    end
    return result
end

function NpcSystemHelper:updateNpcDialogRecord(showRecord)
    local dialogRecord = Me:getDialogRecord()
    for npcId, dialogInfo in pairs(showRecord or {}) do
        if not dialogRecord[npcId] then
            dialogRecord[npcId] = {}
        end
        for dialogId, _ in pairs(dialogInfo) do
            local dialogConfig = NpcDialogueConfig:getCfgById(dialogId)
            if dialogConfig and dialogConfig.dialogueTimes > 0 then
                if dialogRecord[npcId][dialogConfig.dialogId] then
                    dialogRecord[npcId][dialogConfig.dialogId] = dialogRecord[npcId][dialogConfig.dialogId] + 1
                else
                    dialogRecord[npcId][dialogConfig.dialogId] = 1
                end
            end
        end
    end
    Me:setDialogRecord(dialogRecord)
end

NpcSystemHelper:init()