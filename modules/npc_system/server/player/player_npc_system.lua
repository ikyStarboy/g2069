---
--- Generated by PluginCreator
--- npc_system player
--- DateTime:2023-03-29
---

local Player = Player
---@type RewardHelper
local RewardHelper = T(Lib, "RewardHelper")
---@type NpcRewardPoolConfig
local NpcRewardPoolConfig = T(Config, "NpcRewardPoolConfig")

function Player:doNpcLuckyDraw(groupId, poolId, coinName, coinNum)
    local dialogDrawTime = self:getDialogDrawTime()
    dialogDrawTime[groupId] = os.time()
    self:setDialogDrawTime(dialogDrawTime)

    local lottery_guaranteed = 0
    local lottery_stage_count = 0
    local dialogDrawCounts = self:getDialogDrawCounts()
    local rewardPoolCfg = NpcRewardPoolConfig:getCfgByPoolId(poolId)
    local floorWeight = {}
    for _, val in pairs(rewardPoolCfg) do
        if val.floor > 0 then
            if not dialogDrawCounts[poolId] then
                dialogDrawCounts[poolId] = {}
            end
            if not dialogDrawCounts[poolId][val.id] then
                dialogDrawCounts[poolId][val.id] = 0
            end
            dialogDrawCounts[poolId][val.id] = dialogDrawCounts[poolId][val.id] + 1
            if dialogDrawCounts[poolId][val.id] >= val.floor then
                table.insert(floorWeight, val)
            end
        end
    end

    local item
    if #floorWeight > 0 then
        item = Lib.randomItemByWeight(1, floorWeight, false) or {}
        lottery_guaranteed = 1
    else
        item = Lib.randomItemByWeight(1, rewardPoolCfg, false) or {}
    end

    local rewards = {
        [1] = {
            item_alias = item[1].item_alias,
            item_num = item[1].item_num
        },
    }
    RewardHelper:gainNPCLuckyDrawRewards(self, rewards)
    self:pushNpcLuckyDrawResult(0, item[1].item_alias, item[1].item_num)
    if item[1].floor > 0 then
        lottery_stage_count = dialogDrawCounts[poolId][item[1].id]
        dialogDrawCounts[poolId][item[1].id] = 0
    end
    for _, val in pairs(rewardPoolCfg) do
        if val.floor > 0 then
            if dialogDrawCounts[poolId][val.id] >= val.floor then
                dialogDrawCounts[poolId][val.id] = 0
            end
        end
    end
    self:setDialogDrawCounts(dialogDrawCounts)

    local dialogTotalDrawCounts = self:getDialogTotalDrawCounts()
    if not dialogTotalDrawCounts[poolId] then
        dialogTotalDrawCounts[poolId] = 0
    end
    dialogTotalDrawCounts[poolId] = dialogTotalDrawCounts[poolId] + 1
    self:setDialogTotalDrawCounts(dialogTotalDrawCounts)

    local dialogDayDrawCounts = self:getDialogDayDrawCounts()
    if not dialogDayDrawCounts[poolId] then
        dialogDayDrawCounts[poolId] = 0
    end
    local lastTime = self:getRoleLastLoginTime()
    local curTime = Lib.getDayStartTime(os.time())
    if lastTime ~= curTime then
        dialogDayDrawCounts[poolId] = 1
    else
        dialogDayDrawCounts[poolId] = dialogDayDrawCounts[poolId] + 1
    end
    self:setDialogDayDrawCounts(dialogDayDrawCounts)

    local defaultData = {
        lottery_item_alias = coinName,
        lottery_amount_spent = coinNum,
        lottery_count = dialogTotalDrawCounts[poolId],
        lottery_stage_count = lottery_stage_count,
        lottery_daily_count = dialogDayDrawCounts[poolId],
        lottery_guaranteed = lottery_guaranteed,
        lottery_pool_id = poolId,
    }
    Plugins.CallTargetPluginFunc("report", "report", "g2069_lottery", defaultData, self)
end

function Player:pushNpcLuckyDrawResult(stateCode, item_alias, item_num)
    self:sendPacket({
        pid = "SCNpcLuckyDrawResult",
        stateCode = stateCode or 1,
        item_alias = item_alias or "",
        item_num = item_num or 0,
    })
end
